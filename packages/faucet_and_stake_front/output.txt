// Path: src/app/components/Profile.tsx

"use client";
import { useAccount, useEnsName } from "wagmi";

export function Profile() {
  const { address } = useAccount();
  const { data, error, status } = useEnsName({ address });
  if (status === "pending") return <div>Loading ENS name</div>;
  if (status === "error")
    return <div>Error fetching ENS name: {error.message}</div>;
  return <div>ENS name: {data}</div>;
}


// Path: src/app/components/ReadContract.tsx

"use client";
import { useReadContract } from "wagmi";
import { config } from "../../config";
export const ReadContract = ({
  contractAddress,
}: {
  contractAddress: `0x${string}`;
}) => {
  const { data: balance } = useReadContract({
    ...config,
    functionName: "balanceOf",
    args: [contractAddress],
  });

  return <div>Balance: {balance?.toString()}</div>;
};


// Path: src/app/components/WagmiClientProvider.tsx

"use client";

import { WagmiProvider } from "wagmi";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { config } from "../../config";

const queryClient = new QueryClient();
export function WagmiClientProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  );
}


// Path: src/app/components/WalletOptions.tsx

"use client";
import * as React from "react";
import { useConnect } from "wagmi";

export function WalletOptions() {
  const { connectors, connect } = useConnect();

  return connectors.map((connector) => (
    <button key={connector.uid} onClick={() => connect({ connector })}>
      {connector.name}
    </button>
  ));
}


"use client";
import { useState, useEffect } from "react";
import {
  useAccount,
  useConnect,
  useDisconnect,
  useReadContract,
  useWriteContract,
} from "wagmi";
import {
  // connectWallet,
  fetchTokenBalance,
  claimTokens,
  stakeTokens,
  unstakeTokens,
  logout,
} from "@/utils/web3Utils";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { formatDistanceToNow } from "date-fns";
import { ethers } from "ethers";
// import Web3Modal from "web3modal";
import {
  ERC20_ADDRESS,
  STAKING_ADDRESS,
  FAUCET_ADDRESS,
  targetChainId,
} from "../config";

console.log("ERC20_ADDRESS:", ERC20_ADDRESS);
console.log("STAKING_ADDRESS:", STAKING_ADDRESS);
console.log("FAUCET_ADDRESS:", FAUCET_ADDRESS);

export default function Web3TokenDashboard() {
  const [balance, setBalance] = useState<number>(0);
  const [stakedAmount, setStakedAmount] = useState<number>(0);
  const [stakingStart, setStakingStart] = useState<Date | null>(null);
  const [stakingRewards, setStakingRewards] = useState(0);
  const [loading, setLoading] = useState(false);
  // const [error, setError] = useState<string | null>(null);
  const [txHash, setTxHash] = useState<string | null>(null);
  const [currentChainId, setCurrentChainId] = useState<bigint | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  // const [account, setAccount] = useState<string | null>(null);
  const [provider, setProvider] = useState<ethers.BrowserProvider | null>(null);
  const [signer, setSigner] = useState<ethers.JsonRpcSigner | null>(null);
  const [stakeAmount, setStakeAmount] = useState<number>(0);
  const [unstakeAmount, setUnstakeAmount] = useState<number>(0);

  const account = useAccount();
  const { connectors, connect, status, error } = useConnect();
  const { disconnect } = useDisconnect();
  const { data: hash, writeContract } = useWriteContract();


  const handleClaimtokens = async () => {
    setLoading(true);
    // await claimTokens(signer, provider, setLoading, setError, setTxHash);
    await claimTokens(signer, provider, setLoading, setError, setTxHash);
    if (provider && signer && account) {
      await fetchTokenBalance(signer, account, setBalance, setError);
    }
    setLoading(false);
  };



  const handleUnstake = async () => {
    await unstakeTokens(
      signer,
      provider,
      unstakeAmount,
      setLoading,
      setError,
      setTxHash,
      setStakedAmount,
      setStakingStart,
      setStakingRewards
    );
    if (provider && signer && account) {
      await fetchTokenBalance(signer, account, setBalance, setError);
    }
  };

  const handleStake = async () => {
    await stakeTokens(
      signer,
      provider,
      stakeAmount,
      setLoading,
      setError,
      setTxHash,
      setStakedAmount,
      setStakingStart
    );
    if (provider && signer && account) {
      await fetchTokenBalance(signer, account, setBalance, setError);
    }
  };

  const handleLogout = async () => {
    logout(
      setAccount,
      setProvider,
      setSigner,
      setIsConnected,
      setBalance,
      setStakedAmount,
      setStakingStart,
      setStakingRewards,
      setCurrentChainId,
      setError,
      setTxHash
    );
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <Card className="max-w-[39rem]">
        <CardHeader>
          <CardTitle>Web3 Token Dashboard</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {!isConnected ? (
            connectors.map((connector) => (
              <button
                key={connector.uid}
                onClick={() => connect({ connector })}
                type="button"
              >
                {connector.name}
              </button>
            ))
          ) : (
            <>
              <div className="border-t pt-4 space-y-2">
                <div className="flex justify-between">
                  <span>Contrato ERC20:</span>
                  <span className="font-mono">{ERC20_ADDRESS}</span>
                </div>
                <div className="flex justify-between">
                  <span>Contrato Staking:</span>
                  <span className="font-mono">{STAKING_ADDRESS}</span>
                </div>
                <div className="flex justify-between">
                  <span>Contrato Faucet:</span>
                  <span className="font-mono">{FAUCET_ADDRESS}</span>
                </div>
              </div>
              <br></br>
              <br></br>
              <div>
                status: {account.status}
                <br />
                addresses: {JSON.stringify(account.addresses)}
                <br />
                chainId: {account.chainId}
              </div>
              <div className="flex justify-between">
                <span>Cuenta:</span>
                <span className="font-bold">{account}</span>
              </div>
              <div className="flex justify-between">
                <span>Balance:</span>
                <span className="font-bold">{balance.toFixed(2)} tokens</span>
              </div>
              <div className="flex justify-between">
                <span>Staked Amount:</span>
                <span className="font-bold">
                  {stakedAmount !== undefined && !isNaN(stakedAmount)
                    ? stakedAmount.toFixed(2)
                    : "0.00"}{" "}
                  tokens
                </span>
              </div>
              {stakingStart && (
                <div className="flex justify-between">
                  <span>Staking Time:</span>
                  <span className="font-bold">
                    {formatDistanceToNow(stakingStart)}
                  </span>
                </div>
              )}
              <div className="flex justify-between">
                <span>Staking Rewards:</span>
                <span className="font-bold">
                  {stakingRewards.toFixed(2)} tokens
                </span>
              </div>
              <div className="flex flex-col space-y-2">
                <Button
                  onClick={handleClaimtokens}
                  disabled={loading || currentChainId !== BigInt(targetChainId)}
                >
                  {loading ? "Reclamando..." : "Claim Tokens"}
                </Button>
                <input
                  type="number"
                  value={stakeAmount}
                  onChange={(e) => setStakeAmount(Number(e.target.value))}
                  placeholder="Cantidad de tokens para stake"
                  className="w-full p-2 border rounded"
                />
                <Button
                  onClick={handleStake}
                  disabled={loading || currentChainId !== BigInt(targetChainId)}
                >
                  {loading
                    ? "Haciendo Stake..."
                    : `Stake ${stakeAmount} Tokens`}
                </Button>
                <input
                  type="number"
                  value={unstakeAmount}
                  onChange={(e) => setUnstakeAmount(Number(e.target.value))}
                  placeholder="Cantidad de tokens para unstake"
                  className="w-full p-2 border rounded"
                />
                <Button
                  onClick={handleUnstake}
                  disabled={loading || currentChainId !== BigInt(targetChainId)}
                >
                  {loading
                    ? "Haciendo Unstake..."
                    : `Unstake ${unstakeAmount} Tokens`}
                </Button>
                <Button
                  onClick={handleLogout}
                  disabled={loading}
                  className="w-full mt-2 bg-red-500 hover:bg-red-600 text-white"
                >
                  {loading ? "Desconectando..." : "Logout"}
                </Button>
              </div>
            </>
          )}
          {/* {txHash && (
            <div className="p-3 bg-green-100 rounded">
              <p className="text-green-800">
                Transacci√≥n enviada:{" "}
                <a
                  href={`https://etherscan.io/tx/${txHash}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="underline break-all"
                >
                  {txHash}
                </a>
              </p>
            </div>
          )} */}
          {error && (
            <p className="text-red-500" role="alert">
              {error}
            </p>
          )}
          {currentChainId !== BigInt(targetChainId) && (
            <p className="text-orange-500" role="alert">
              Cambia a la red de Hardhat para reclamar los tokens.
            </p>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

async function fetchStakedAmount(
  address: string,
  signer: ethers.JsonRpcSigner,
  setError: (msg: string) => void
): Promise<number> {
  try {
    const { fetchStakedAmount: originalFetch } = await import(
      "@/utils/web3Utils"
    );
    return await originalFetch(address, signer, setError);
  } catch (err) {
    console.error("Error al obtener el monto staked:", err);
    setError("No se pudo obtener el monto staked.");
    return 0;
  }
}



"use client";

import { useState } from "react";
import {
  Box,
  Typography,
  Button,
  Card,
  CardContent,
  CardHeader,
  TextField,
  Divider,
  CircularProgress,
} from "@mui/material";
import { useAccount, useConnect, useDisconnect } from "wagmi";
import TokenBalance from "@/components/ui/TokenBalance";
import ClaimTokens from "@/components/ui/ClaimTokens";
import { useContractAddresses } from "@/hooks/useContractAddresses";

import { StakingComponent } from "@/components/ui/Staking";

export default function Web3TokenDashboard() {
  const [stakeAmount, setStakeAmount] = useState<number>(0);
  const [unstakeAmount, setUnstakeAmount] = useState<number>(0);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null); // Agregado para manejar errores

  const { connectors, connect } = useConnect();
  const { disconnect } = useDisconnect();
  const account = useAccount();

  const contractAddresses = useContractAddresses();

  // Manejar la conexi√≥n y desconexi√≥n
  const handleConnect = (connectorId: string) => {
    const connector = connectors.find((c) => c.id === connectorId);
    if (connector) {
      connect({ connector });
    }
  };

  const handleDisconnect = () => {
    disconnect();
  };

  if (!contractAddresses && account.isConnected) {
    return (
      <Box
        sx={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          minHeight: "100vh",
          bgcolor: "background.default",
          p: 2,
        }}
      >
        <Typography color="error">
          La red a la que est√°s conectado no es soportada por esta aplicaci√≥n.
        </Typography>
      </Box>
    );
  }

  return (
    <Box
      sx={{
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        minHeight: "100vh",
        bgcolor: "background.default",
        p: 2,
      }}
    >
      <Card sx={{ maxWidth: 600, width: "100%" }}>
        <CardHeader
          title="Web3 Token Dashboard"
          sx={{ textAlign: "center", bgcolor: "primary.main", color: "#fff" }}
        />
        <CardContent>
          {/* Informaci√≥n de los contratos */}
          <Box>
            <Typography variant="h6">Informaci√≥n de Contratos</Typography>
            <Divider sx={{ my: 2 }} />
            {contractAddresses ? (
              <Box sx={{ mb: 2 }}>
                <Typography variant="body1">
                  <strong>Contrato ERC20:</strong>{" "}
                  {contractAddresses.ERC20_ADDRESS}
                </Typography>
                <Typography variant="body1">
                  <strong>Contrato Staking:</strong>{" "}
                  {contractAddresses.STAKING_ADDRESS}
                </Typography>
                <Typography variant="body1">
                  <strong>Contrato Faucet:</strong>{" "}
                  {contractAddresses.FAUCET_ADDRESS}
                </Typography>
              </Box>
            ) : (
              <Typography variant="body1">
                No hay contratos definidos para la red actual.
              </Typography>
            )}
          </Box>

          {/* Estado de la cuenta */}
          <Box>
            <Typography variant="h6">Estado de la Cuenta</Typography>
            <Divider sx={{ my: 2 }} />
            {account.isConnected ? (
              <>
                <Typography variant="body1">
                  <strong>Status:</strong> Conectado
                </Typography>
                <Typography variant="body1">
                  <strong>Direcci√≥n:</strong> {account.address || "N/A"}
                </Typography>
                <Typography variant="body1">
                  <strong>Chain ID:</strong> {account.chain?.id || "N/A"}
                </Typography>
                <Button
                  variant="contained"
                  color="error"
                  onClick={handleDisconnect}
                  sx={{ mt: 2 }}
                >
                  Disconnect
                </Button>
              </>
            ) : (
              <>
                <Typography variant="body1">
                  Conecta tu wallet para continuar.
                </Typography>
                <Box sx={{ mt: 2, display: "flex", gap: 1 }}>
                  {connectors.map((connector) => (
                    <Button
                      key={connector.id}
                      variant="contained"
                      onClick={() => handleConnect(connector.id)}
                    >
                      {connector.name}
                    </Button>
                  ))}
                </Box>
              </>
            )}
          </Box>

          {/* Componente ClaimTokens */}
          {account.isConnected && contractAddresses && (
            <Box sx={{ mt: 2 }}>
              <ClaimTokens contractAddress={contractAddresses.FAUCET_ADDRESS} />
            </Box>
          )}

          {/* Componente TokenBalance */}
          {account.isConnected && contractAddresses && (
            <Box sx={{ mt: 2 }}>
              <TokenBalance
                address={account.address}
                contractAddress={contractAddresses.ERC20_ADDRESS}
              />
            </Box>
          )}

          {/* Acciones de staking */}

          <StakingComponent />


          {/* {account.isConnected && contractAddresses && (
            <Box sx={{ mt: 4 }}>
              <Typography variant="h6">Acciones de Staking</Typography>
              <Divider sx={{ my: 2 }} />
              <TextField
                label="Cantidad para Stake"
                type="number"
                value={stakeAmount}
                onChange={(e) => setStakeAmount(Number(e.target.value))}
                fullWidth
                sx={{ mb: 2 }}
              />
              <Button
                variant="contained"
                color="primary"
                onClick={async () => {
                  setLoading(true);
                  // Aqu√≠ deber√≠as llamar a tu funci√≥n para hacer stake de tokens
                  // Por ejemplo: await handleStake()
                  // Aseg√∫rate de implementar la l√≥gica de staking correctamente
                  try {
                    // Implementa la l√≥gica real de staking aqu√≠
                    // Por ejemplo:
                    // await stakeTokens(...)
                  } catch (err) {
                    setError("Error al hacer stake de tokens.");
                  } finally {
                    setLoading(false);
                  }
                }}
                disabled={loading}
                fullWidth
              >
                {loading ? <CircularProgress size={24} /> : `Stake Tokens`}
              </Button>

              <TextField
                label="Cantidad para Unstake"
                type="number"
                value={unstakeAmount}
                onChange={(e) => setUnstakeAmount(Number(e.target.value))}
                fullWidth
                sx={{ mt: 2 }}
              />
              <Button
                variant="contained"
                color="secondary"
                onClick={async () => {
                  setLoading(true);
                  // Aqu√≠ deber√≠as llamar a tu funci√≥n para hacer unstake de tokens
                  // Por ejemplo: await handleUnstake()
                  // Aseg√∫rate de implementar la l√≥gica de unstaking correctamente
                  try {
                    // Implementa la l√≥gica real de unstaking aqu√≠
                    // Por ejemplo:
                    // await unstakeTokens(...)
                  } catch (err) {
                    setError("Error al hacer unstake de tokens.");
                  } finally {
                    setLoading(false);
                  }
                }}
                disabled={loading}
                fullWidth
                sx={{ mt: 2 }}
              >
                {loading ? <CircularProgress size={24} /> : `Unstake Tokens`}
              </Button>

              {/* Mostrar errores si existen */}
              {error && (
                <Typography color="error" sx={{ mt: 2 }}>
                  {error}
                </Typography>
              )}
            </Box>
          )} */}
        </CardContent>
      </Card>
    </Box>
  );
}


// Path: src/app/page.tsx.old

"use client";

import { useState, useEffect } from "react";
import dynamic from "next/dynamic";
import {
  useAccount,
  useConnect,
  useDisconnect,
  // useReadContract,
  useWriteContract,
} from "wagmi";
import { type GetAccountReturnType } from "@wagmi/core";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ERC20_ADDRESS, STAKING_ADDRESS, FAUCET_ADDRESS } from "../config";
import { TokenBalance } from "../components/ui/TokenBalance";
import ClaimTokens from "@/components/ui/ClaimTokens";

function App() {
  const [erc20TokenBalance, setErc20TokenBalance] = useState<number>(0);
  const [stakedAmount, setStakedAmount] = useState<number>(0);
  const [stakingStart, setStakingStart] = useState<Date | null>(null);
  const [stakingRewards, setStakingRewards] = useState(0);
  const [loading, setLoading] = useState(false);
  const [showError, setShowError] = useState<string | null>(null);
  const [acc, setAcc] = useState<GetAccountReturnType>({});

  const account = useAccount();

  useEffect(() => {
    setAcc(account);
  }, [account]);

  const { connectors, connect, status, error } = useConnect();
  const { disconnect } = useDisconnect();

  // await fetchTokenBalance(signer, account, setBalance, setError);
  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <Card className="max-w-[39rem]">
        <CardHeader>
          <CardTitle>Web3 Token Dashboard</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="border-t pt-4 space-y-2">
            <div className="flex justify-between">
              <span>Contrato ERC20:</span>
              <span className="font-mono">{ERC20_ADDRESS}</span>
            </div>
            <div className="flex justify-between">
              <span>Contrato Staking:</span>
              <span className="font-mono">{STAKING_ADDRESS}</span>
            </div>
            <div className="flex justify-between">
              <span>Contrato Faucet:</span>
              <span className="font-mono">{FAUCET_ADDRESS}</span>
            </div>
          </div>
          <div>
            <h2>Account</h2>
            <br />
            <div className="flex justify-between py-2">
              <span>status:</span>
              <span className="font-mono">{acc.status}</span>
            </div>
            <div className="flex justify-between py-2">
              <span>addresses:</span>
              <span className="font-mono">{JSON.stringify(acc.addresses)}</span>
            </div>
            <div className="flex justify-between py-2">
              <span>chainId:</span>
              <span className="font-mono">{acc.chainId}</span>
            </div>

            <div className="flex justify-between py-2">
              {account.status === "connected" && (
                <Button type="button" onClick={() => disconnect()}>
                  Disconnect
                </Button>
              )}
            </div>
          </div>

          <div>
            <h2>Connect</h2>
            {connectors.map((connector) => (
              <Button
                key={connector.uid}
                onClick={() => connect({ connector })}
                type="button"
              >
                {connector.name}
              </Button>
            ))}
            <div>{status}</div>
            <div>{error?.message}</div>
          </div>
          <div className="flex justify-between py-2">
            {account?.status === "connected" && (
              <div>
                <TokenBalance address={account?.addresses[0]} />
              </div>
            )}
          </div>
          <div className="flex justify-between py-2">
            {account?.status === "connected" && <div>{<ClaimTokens />}</div>}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

export default App;


// Path: src/app/providers.tsx

"use client";

import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { type ReactNode, useState } from "react";
import { type State, WagmiProvider } from "wagmi";

import { getConfig } from "@/config";

export function Providers(props: {
  children: ReactNode;
  initialState?: State;
}) {
  const [config] = useState(() => getConfig());
  const [queryClient] = useState(() => new QueryClient());

  return (
    <WagmiProvider config={config} initialState={props.initialState}>
      <QueryClientProvider client={queryClient}>
        {props.children}
      </QueryClientProvider>
    </WagmiProvider>
  );
}


// Path: src/components/ui/ClaimTokens.tsx

"use client";

import React, { useState } from "react";
import { Button } from "@/components/ui/button"; // Aseg√∫rate de importar tu componente de bot√≥n correctamente
import { useWriteContract } from "wagmi";
// import { FAUCET_ADDRESS } from "@/config";
import faucetAbi from "../../../../abis/Faucet.json";
// const contractAddress: `0x${string}` = FAUCET_ADDRESS as `0x${string}`;

const ClaimTokens = ({
  contractAddress,
}: {
  contractAddress: `0x${string}`;
}) => {
  const [loading, setLoading] = useState(false);
  const { data: hash, writeContract } = useWriteContract();

  const handleClaimTokens = async () => {
    setLoading(true);
    try {
      writeContract({
        address: contractAddress,
        abi: faucetAbi.abi,
        functionName: "claimTokens",
        // args: [BigInt(tokenId)],
      });
    } catch (error) {
      console.error("Error al reclamar tokens", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Button onClick={handleClaimTokens} disabled={loading}>
      {loading ? "Reclamando..." : "Claim Tokens"}
    </Button>
  );
};

export default ClaimTokens;


// Path: src/components/ui/Staking.tsx

import React, { useState } from "react";
import {
  Card,
  CardContent,
  TextField,
  Button,
  Box,
  Typography,
  CircularProgress,
} from "@mui/material";
import { useStaking } from "../../hooks/useStake";
import { useContractAddresses } from "@/hooks/useContractAddresses";

export const StakingComponent = () => {
  const [stakeAmount, setStakeAmount] = useState("");
  const [unstakeAmount, setUnstakeAmount] = useState("");

  const contractAddresses = useContractAddresses();

  const { stake, unstake, isWaitingForApproval, approvalHash, stakeHash } =
    useStaking(
      contractAddresses?.STAKING_ADDRESS,
      contractAddresses?.ERC20_ADDRESS
    );

  const handleStake = async () => {
    if (!stakeAmount) return;
    await stake(stakeAmount);
    setStakeAmount("");
  };

  const handleUnstake = async () => {
    if (!unstakeAmount) return;
    await unstake(unstakeAmount);
    setUnstakeAmount("");
  };

  return (
    <Card sx={{ maxWidth: 400, margin: "auto", mt: 4 }}>
      <CardContent>
        <Box sx={{ mb: 4 }}>
          <Typography variant="h6" sx={{ mb: 2 }}>
            Stake
          </Typography>
          <TextField
            fullWidth
            type="number"
            value={stakeAmount}
            onChange={(e) => setStakeAmount(e.target.value)}
            placeholder="Amount to stake"
            InputProps={{
              inputProps: { min: 0, step: "0.000000000000000001" },
            }}
            sx={{ mb: 2 }}
          />
          <Button
            fullWidth
            variant="contained"
            onClick={handleStake}
            disabled={!stakeAmount || isWaitingForApproval}
          >
            {isWaitingForApproval ? (
              <CircularProgress size={24} color="inherit" />
            ) : (
              "Stake"
            )}
          </Button>
        </Box>

        <Box>
          <Typography variant="h6" sx={{ mb: 2 }}>
            Unstake
          </Typography>
          <TextField
            fullWidth
            type="number"
            value={unstakeAmount}
            onChange={(e) => setUnstakeAmount(e.target.value)}
            placeholder="Amount to unstake"
            InputProps={{
              inputProps: { min: 0, step: "0.000000000000000001" },
            }}
            sx={{ mb: 2 }}
          />
          <Button
            fullWidth
            variant="contained"
            onClick={handleUnstake}
            disabled={!unstakeAmount}
            color="secondary"
          >
            Unstake
          </Button>
        </Box>

        {(approvalHash || stakeHash) && (
          <Box sx={{ mt: 2 }}>
            <Typography variant="body2" sx={{ wordBreak: "break-all" }}>
              {approvalHash && `Approval TX: ${approvalHash}`}
              {stakeHash && `Stake TX: ${stakeHash}`}
            </Typography>
          </Box>
        )}
      </CardContent>
    </Card>
  );
};


// Path: src/components/ui/TokenBalance.tsx

"use client";

import React, { useState, useEffect } from "react";
import { CircularProgress, Typography } from "@mui/material";
import { useReadContract, useAccount, useChainId } from "wagmi";
import { ethers } from "ethers";
import tokenAbi from "../../../../abis/MyToken.json";
// import { ERC20_ADDRESS } from "@/config";

interface TokenBalanceProps {
  address?: `0x${string}`;
  contractAddress: `0x${string}`;
}

const TokenBalance: React.FC<TokenBalanceProps> = ({
  address,
  contractAddress,
}) => {
  const { status } = useAccount(); // Obtiene el estado de la cuenta
  // const contractAddress: `0x${string}` = ERC20_ADDRESS as `0x${string}`;
  const [balance, setBalance] = useState<number | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Declarar el hook `useReadContract` fuera del condicional
  const {
    data,
    error: contractError,
    isLoading,
  } = useReadContract({
    abi: tokenAbi.abi,
    address: contractAddress,
    functionName: "balanceOf",
    args: [address],
    enabled: status === "connected", // Solo habilitar la consulta si est√° conectado
    watch: true, // Habilita la actualizaci√≥n en tiempo real
  });
  const chainId = useChainId();
  useEffect(() => {
    if (contractError) {
      // setBalance(0);
      setError("Error al obtener el balance del contrato");
    } else if (data) {
      const formattedBalance = parseFloat(ethers.formatUnits(data, 6));
      setBalance(formattedBalance);
      setError(null);
    }
  }, [data, contractError]);

  if (isLoading) {
    return <CircularProgress />;
  }

  if (error) {
    return <Typography color="error">{error}</Typography>;
  }

  return (
    <Typography>
      {balance !== null
        ? `Balance: ${balance.toLocaleString()} tokens`
        : "Cargando balance..."}
    </Typography>
  );
};

export default TokenBalance;


// Path: src/components/ui/button.tsx

"use client";
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = "Button";

export { Button, buttonVariants };


// Path: src/components/ui/card.tsx

"use client";
import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "w-full max-w-2xl rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};


// Path: src/config.ts

// Path: src/config.ts

import { http, createConfig } from "wagmi";
import {
  fantomSonicTestnet,
  mainnet,
  polygonAmoy,
  sepolia,
} from "wagmi/chains";
import { injected, metaMask, safe } from "wagmi/connectors";
import { defineChain } from "viem";

import { config as dotenvConfig } from "dotenv";
dotenvConfig();

// Definir la red personalizada localhost con chainId 41337
const localhost = defineChain({
  id: 41337,
  name: "Localhost 41337",
  network: "localhost",
  nativeCurrency: {
    name: "Ethereum",
    symbol: "ETH",
    decimals: 18,
  },
  rpcUrls: {
    default: {
      http: ["http://127.0.0.1:8545"], // URL de tu nodo local (Hardhat, Ganache, etc.)
    },
    public: {
      http: ["http://127.0.0.1:8545"],
    },
  },
  blockExplorers: {
    default: { name: "Localhost Explorer", url: "http://127.0.0.1:8545" },
  },
  testnet: true, // Marcar como testnet
});

// Configurar wagmi con las cadenas
export const config = createConfig({
  chains: [mainnet, sepolia, fantomSonicTestnet, polygonAmoy, localhost], // Agregar la red localhost
  multiInjectedProviderDiscovery: true,
  ssr: true, // Desactivar SSR para evitar problemas con hooks de cliente
  connectors: [injected(), metaMask(), safe()],
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http(),
    [fantomSonicTestnet.id]: http(), // Agregar transport para Fantom testnet
    [polygonAmoy.id]: http(),
    [localhost.id]: http(),
  },
});

// Mapa de chainId a direcciones de contrato
interface ContractAddresses {
  ERC20_ADDRESS: `0x${string}`;
  STAKING_ADDRESS: `0x${string}`;
  FAUCET_ADDRESS: `0x${string}`;
}

export const contractAddressesMap: Record<number, ContractAddresses> = {
  // Ejemplo para localhost (chainId: 41337)
  41337: {
    ERC20_ADDRESS:
      (process.env.NEXT_PUBLIC_LOCAL_ERC20_ADDRESS as `0x${string}`) || "",
    STAKING_ADDRESS:
      (process.env.NEXT_PUBLIC_LOCAL_STAKING_ADDRESS as `0x${string}`) || "",
    FAUCET_ADDRESS:
      (process.env.NEXT_PUBLIC_LOCAL_FAUCET_ADDRESS as `0x${string}`) || "",
  },
  // Ejemplo para Sepolia (chainId: 11155111)
  11155111: {
    ERC20_ADDRESS:
      (process.env
        .NEXT_PUBLIC_SEPOLIA_TESTNET_ERC20_ADDRESS as `0x${string}`) || "",
    STAKING_ADDRESS:
      (process.env
        .NEXT_PUBLIC_SEPOLIA_TESTNET_STAKING_ADDRESS as `0x${string}`) || "",
    FAUCET_ADDRESS:
      (process.env
        .NEXT_PUBLIC_SEPOLIA_TESTNET_FAUCET_ADDRESS as `0x${string}`) || "",
  },
  // A√±ade m√°s configuraciones para otras redes seg√∫n sea necesario
  4002: {
    ERC20_ADDRESS:
      (process.env.NEXT_PUBLIC_FANTOM_TESTNET_ERC20_ADDRESS as `0x${string}`) ||
      "",
    STAKING_ADDRESS:
      (process.env
        .NEXT_PUBLIC_FANTOM_TESTNET_STAKING_ADDRESS as `0x${string}`) || "",
    FAUCET_ADDRESS:
      (process.env
        .NEXT_PUBLIC_FANTOM_TESTNET_FAUCET_ADDRESS as `0x${string}`) || "",
  }, // Fantom Testnet
  80002: {
    ERC20_ADDRESS:
      (process.env
        .NEXT_PUBLIC_POLYGON_TESTNET_ERC20_ADDRESS as `0x${string}`) || "",
    STAKING_ADDRESS:
      (process.env
        .NEXT_PUBLIC_POLYGON_TESTNET_STAKING_ADDRESS as `0x${string}`) || "",
    FAUCET_ADDRESS:
      (process.env
        .NEXT_PUBLIC_POLYGON_TESTNET_FAUCET_ADDRESS as `0x${string}`) || "",
  }, // Polygon Testnet
};

export function getContractAddresses(
  chainId: number
): ContractAddresses | null {
  return contractAddressesMap[chainId] || null;
}

export function getConfig() {
  return config;
}

// import { http, createConfig, createStorage } from "wagmi";
// import {
//   fantomSonicTestnet,
//   mainnet,
//   polygonAmoy,
//   sepolia,
// } from "wagmi/chains";
// import { injected, metaMask, safe } from "wagmi/connectors";
// import { defineChain } from "viem";

// import { config as dotenvConfig } from "dotenv";
// dotenvConfig();

// // Definir la red personalizada localhost con chainId 41337
// const localhost = defineChain({
//   id: 41337,
//   name: "Localhost 41337",
//   network: "localhost",
//   nativeCurrency: {
//     name: "Ethereum",
//     symbol: "ETH",
//     decimals: 18,
//   },
//   rpcUrls: {
//     default: {
//       http: ["http://127.0.0.1:8545"], // URL de tu nodo local (Hardhat, Ganache, etc.)
//     },
//     public: {
//       http: ["http://127.0.0.1:8545"],
//     },
//   },
//   blockExplorers: {
//     default: { name: "Localhost Explorer", url: "http://127.0.0.1:8545" },
//   },
//   testnet: true, // Marcar como testnet
// });

// // Configurar wagmi con las cadenas
// export const config = createConfig({
//   chains: [mainnet, sepolia, fantomSonicTestnet, polygonAmoy], //localhost], // Agregar la red localhost

//   multiInjectedProviderDiscovery: true,
//   // multiInjectedProviderDiscovery: false,
//   ssr: true, // is in server side rendering?
//   // storage: createStorage({ storage: window.localStorage }),
//   connectors: [injected(), metaMask(), safe()],
//   // connectors: [metaMask(), safe()],
//   transports: {
//     [mainnet.id]: http(),
//     [sepolia.id]: http(),
//     [fantomSonicTestnet.id]: http(), // Agregar transport para Fantom testnet
//     [polygonAmoy.id]: http(),
//     // Si quieres volver a incluir localhost:
//     [localhost.id]: http(),
//   },
// });

// const targetNetwork = process.env.NEXT_PUBLIC_TARGET_NETWORK || "localhost";

// let ERC20_ADDRESS = "";
// let STAKING_ADDRESS = "";
// let FAUCET_ADDRESS = "";
// let targetChainId: bigint;

// switch (targetNetwork) {
//   case "fantomTestnet":
//     ERC20_ADDRESS = process.env.NEXT_PUBLIC_FANTOM_TESTNET_ERC20_ADDRESS || "";
//     STAKING_ADDRESS =
//       process.env.NEXT_PUBLIC_FANTOM_TESTNET_STAKING_ADDRESS || "";
//     FAUCET_ADDRESS =
//       process.env.NEXT_PUBLIC_FANTOM_TESTNET_FAUCET_ADDRESS || "";
//     targetChainId = 4002n;
//     break;
//   case "sepolia":
//     ERC20_ADDRESS = process.env.NEXT_PUBLIC_SEPOLIA_TESTNET_ERC20_ADDRESS || "";
//     STAKING_ADDRESS =
//       process.env.NEXT_PUBLIC_SEPOLIA_TESTNET_STAKING_ADDRESS || "";
//     FAUCET_ADDRESS =
//       process.env.NEXT_PUBLIC_SEPOLIA_TESTNET_FAUCET_ADDRESS || "";
//     targetChainId = 11155111n;
//     break;
//   case "polygonTestnet":
//     ERC20_ADDRESS = process.env.NEXT_PUBLIC_POLYGON_TESTNET_ERC20_ADDRESS || "";
//     STAKING_ADDRESS =
//       process.env.NEXT_PUBLIC_POLYGON_TESTNET_STAKING_ADDRESS || "";
//     FAUCET_ADDRESS =
//       process.env.NEXT_PUBLIC_POLYGON_TESTNET_FAUCET_ADDRESS || "";
//     targetChainId = 80002n;
//     break;
//   case "localhost":
//   default:
//     ERC20_ADDRESS = process.env.NEXT_PUBLIC_LOCAL_ERC20_ADDRESS || "";
//     STAKING_ADDRESS = process.env.NEXT_PUBLIC_LOCAL_STAKING_ADDRESS || "";
//     FAUCET_ADDRESS = process.env.NEXT_PUBLIC_LOCAL_FAUCET_ADDRESS || "";
//     targetChainId = 41337n;
//     break;
// }

// export { ERC20_ADDRESS, STAKING_ADDRESS, FAUCET_ADDRESS, targetChainId };

// export function getConfig() {
//   return config;
// }


// Path: src/hooks/useContractAddresses.ts

// Path: src/hooks/useContractAddresses.ts

import { useChainId } from "wagmi";
import { getContractAddresses } from "@/config";

export interface IContractAddresses {
  ERC20_ADDRESS: `0x${string}`;
  STAKING_ADDRESS: `0x${string}`;
  FAUCET_ADDRESS: `0x${string}`;
}

export function useContractAddresses(): IContractAddresses | null {
  const chainId = useChainId();
  console.log(chainId);
  const addresses = getContractAddresses(chainId);

  if (!addresses) {
    console.warn(`No contract addresses defined for chainId: ${chainId}`);
    return null;
  }

  return addresses;
}


// Path: src/hooks/useStake.ts

import {
  useWriteContract,
  useReadContract,
  useWaitForTransactionReceipt,
} from "wagmi";
import { parseEther } from "viem";
import tokenAbi from "../../../abis/MyToken.json";
import stakingAbi from "../../../abis/Staking.json";

export const useStaking = (
  stakingAddress: `0x${string}` | undefined,
  tokenAddress: `0x${string}` | undefined
) => {
  const { writeContract: writeToken, data: approvalHash } = useWriteContract();
  const { writeContract: writeStaking, data: stakeHash } = useWriteContract();
  const { isLoading: isWaitingForApproval } = useWaitForTransactionReceipt({
    hash: approvalHash,
  });

  const { data: allowanceData } = useReadContract({
    address: tokenAddress,
    abi: tokenAbi.abi,
    functionName: "allowance",
    args: [stakingAddress],
  });

  // Aseg√∫rate de que allowance sea un bigint
  const allowance: bigint = allowanceData
    ? BigInt(allowanceData.toString())
    : 0n;

  const stake = async (amount: string) => {
    const parsedAmount = parseEther(amount);

    // Compara allowance con parsedAmount como bigints
    if (allowance < parsedAmount) {
      await writeToken({
        address: tokenAddress,
        abi: tokenAbi.abi,
        functionName: "approve",
        args: [stakingAddress, parsedAmount],
      });
    }

    await writeStaking({
      address: stakingAddress,
      abi: stakingAbi.abi,
      functionName: "stake",
      args: [parsedAmount],
    });
  };

  const unstake = async (amount: string) => {
    await writeStaking({
      address: stakingAddress,
      abi: stakingAbi.abi,
      functionName: "unstake",
      args: [parseEther(amount)],
    });
  };

  return {
    stake,
    unstake,
    isWaitingForApproval,
    approvalHash,
    stakeHash,
  };
};


// Path: src/lib/utils.ts

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


// Path: src/styles/theme.js

"use server";
// styles/theme.js
import { createTheme } from "@mui/material/styles";

const theme = createTheme({
  palette: {
    primary: {
      main: "#1976d2",
    },
    secondary: {
      main: "#dc004e",
    },
  },
  typography: {
    fontFamily: "Roboto, Arial, sans-serif",
  },
});

export default theme;


// Path: src/utils/web3Utils.ts

/* eslint-disable react-hooks/rules-of-hooks */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unsafe-function-type */
//utils/web3Utils.ts
"use client";

import { ethers } from "ethers";
// import { useReadContract } from "wagmi";
// import Web3Modal, { IProviderOptions, IProviderDisplay } from "web3modal";
import tokenAbi from "../../../abis/MyToken.json";
import faucetAbi from "../../../abis/Faucet.json";
import stakingAbi from "../../../abis/Staking.json";

import { ERC20_ADDRESS, STAKING_ADDRESS, FAUCET_ADDRESS } from "../config";
import { Config, UseAccountReturnType, UseReadContractParameters } from "wagmi";
import { WriteContractMutate } from "wagmi/query";
import { useReadContract } from "wagmi";

export const logout = (
  setAccount: Function,
  setProvider: Function,
  setSigner: Function,
  setIsConnected: Function,
  setBalance: Function,
  setStakedAmount: Function,
  setStakingStart: Function,
  setStakingRewards: Function,
  setCurrentChainId: Function,
  setError: Function,
  setTxHash: Function
) => {
  setAccount(null);
  setProvider(null);
  setSigner(null);
  setIsConnected(false);
  setBalance(0);
  setStakedAmount(0);
  setStakingStart(null);
  setStakingRewards(0);
  setCurrentChainId(null);
  setError(null);
  setTxHash(null);
};


