// Path: .env

# Red objetivo
NEXT_PUBLIC_TARGET_NETWORK="fantomTestnet"

# Direcciones para fantomTestnet
NEXT_PUBLIC_FANTOM_TESTNET_ERC20_ADDRESS="0x73C4EFcCb0340bdFd2C0d8B401f4A7CfBc07fd07"
NEXT_PUBLIC_FANTOM_TESTNET_STAKING_ADDRESS="0xD233A182c5A89280457a68B23C761AaE9fe3D765"
NEXT_PUBLIC_FANTOM_TESTNET_FAUCET_ADDRESS="0x539383726418f2F903dFa775f9D3D25AeE7E602A"

# Direcciones para localhost
NEXT_PUBLIC_LOCAL_ERC20_ADDRESS="0x5FbDB2315678afecb367f032d93F642f64180aa3"
NEXT_PUBLIC_LOCAL_STAKING_ADDRESS="0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
NEXT_PUBLIC_LOCAL_FAUCET_ADDRESS="0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"


// Path: package.json

{
  "name": "token_erc20_nextjs_faucet",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-slot": "^1.1.0",
    "@shadcn/ui": "^0.0.4",
    "@tanstack/react-query": "^5.59.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "dotenv": "^16.4.7",
    "ethers": "^6.13.3",
    "install": "^0.13.0",
    "lucide-react": "^0.454.0",
    "next": "14.2.14",
    "npm": "^10.8.3",
    "react": "^18",
    "react-dom": "^18",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7",
    "viem": "^2.21.17",
    "wagmi": "^2.12.16",
    "web3modal": "^1.9.12"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.2.14",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}


// Path: src/app/components/Profile.tsx

"use client";
import { useAccount, useEnsName } from "wagmi";

export function Profile() {
  const { address } = useAccount();
  const { data, error, status } = useEnsName({ address });
  if (status === "pending") return <div>Loading ENS name</div>;
  if (status === "error")
    return <div>Error fetching ENS name: {error.message}</div>;
  return <div>ENS name: {data}</div>;
}


// Path: src/app/components/ReadContract.tsx

import { useReadContract } from "wagmi";
import { config } from "../../config";
export function ReadContract() {
  const { data: balance } = useReadContract({
    ...config,
    functionName: "balanceOf",
    args: ["0x03A71968491d55603FFe1b11A9e23eF013f75bCF"],
  });

  return <div>Balance: {balance?.toString()}</div>;
}


// Path: src/app/components/WagmiClientProvider.tsx

"use client";

import { WagmiProvider } from "wagmi";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { config } from "../../config";

const queryClient = new QueryClient();
export function WagmiClientProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  );
}


// Path: src/app/components/WalletOptions.tsx

import * as React from "react";
import { useConnect } from "wagmi";

export function WalletOptions() {
  const { connectors, connect } = useConnect();

  return connectors.map((connector) => (
    <button key={connector.uid} onClick={() => connect({ connector })}>
      {connector.name}
    </button>
  ));
}


// Path: src/app/page.tsx

"use client";
import { useState, useEffect } from "react";
import {
  connectWallet,
  fetchTokenBalance,
  claimTokens,
  stakeTokens,
  unstakeTokens,
  logout,
} from "@/utils/web3Utils";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { formatDistanceToNow } from "date-fns";
import { ethers } from "ethers";
import Web3Modal from "web3modal";
import {
  ERC20_ADDRESS,
  STAKING_ADDRESS,
  FAUCET_ADDRESS,
  targetChainId,
} from "../config";

console.log("ERC20_ADDRESS:", ERC20_ADDRESS);
console.log("STAKING_ADDRESS:", STAKING_ADDRESS);
console.log("FAUCET_ADDRESS:", FAUCET_ADDRESS);

export default function Web3TokenDashboard() {
  const [balance, setBalance] = useState<number>(0);
  const [stakedAmount, setStakedAmount] = useState<number>(0);
  const [stakingStart, setStakingStart] = useState<Date | null>(null);
  const [stakingRewards, setStakingRewards] = useState(0);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [txHash, setTxHash] = useState<string | null>(null);
  const [currentChainId, setCurrentChainId] = useState<bigint | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [account, setAccount] = useState<string | null>(null);
  const [provider, setProvider] = useState<ethers.BrowserProvider | null>(null);
  const [signer, setSigner] = useState<ethers.JsonRpcSigner | null>(null);
  const [stakeAmount, setStakeAmount] = useState<number>(0);
  const [unstakeAmount, setUnstakeAmount] = useState<number>(0);

  useEffect(() => {
    const init = async () => {
      const web3Modal = new Web3Modal({ cacheProvider: true });
      if (web3Modal.cachedProvider) {
        await connectWallet(
          setProvider,
          setSigner,
          setAccount,
          setIsConnected,
          setError,
          setCurrentChainId,
          setStakedAmount,
          setBalance,
          BigInt(targetChainId)
        );
      } else {
        setIsConnected(false);
        setAccount(null);
      }
    };

    init();
  }, []);

  useEffect(() => {
    if (window.ethereum) {
      const handleAccountsChanged = async (accounts: string[]) => {
        if (accounts.length > 0) {
          setAccount(accounts[0]);
          console.log("DirecciÃ³n del usuario:", accounts[0]);

          if (signer && provider) {
            await fetchTokenBalance(signer, accounts[0], setBalance, setError);
            const staked = await fetchStakedAmount(
              accounts[0],
              signer,
              setError
            );
            setStakedAmount(staked);
          } else {
            await connectWallet(
              setProvider,
              setSigner,
              setAccount,
              setIsConnected,
              setError,
              setCurrentChainId,
              setStakedAmount,
              setBalance,
              BigInt(targetChainId)
            );
          }
        } else {
          handleLogout();
        }
      };

      window.ethereum.on("accountsChanged", handleAccountsChanged);
      return () => {
        window.ethereum.removeListener(
          "accountsChanged",
          handleAccountsChanged
        );
      };
    }
  }, [signer, provider]);

  const handleClaimtokens = async () => {
    setLoading(true);
    await claimTokens(signer, provider, setLoading, setError, setTxHash);
    if (provider && signer && account) {
      await fetchTokenBalance(signer, account, setBalance, setError);
    }
    setLoading(false);
  };

  const handleConnectWallet = async () => {
    setLoading(true);
    await connectWallet(
      setProvider,
      setSigner,
      setAccount,
      setIsConnected,
      setError,
      setCurrentChainId,
      setStakedAmount,
      setBalance,
      BigInt(targetChainId)
    );
    setLoading(false);

    if (provider && signer && account) {
      await fetchTokenBalance(signer, account, setBalance, setError);
    }
  };

  const handleUnstake = async () => {
    await unstakeTokens(
      signer,
      provider,
      unstakeAmount,
      setLoading,
      setError,
      setTxHash,
      setStakedAmount,
      setStakingStart,
      setStakingRewards
    );
    if (provider && signer && account) {
      await fetchTokenBalance(signer, account, setBalance, setError);
    }
  };

  const handleStake = async () => {
    await stakeTokens(
      signer,
      provider,
      stakeAmount,
      setLoading,
      setError,
      setTxHash,
      setStakedAmount,
      setStakingStart
    );
    if (provider && signer && account) {
      await fetchTokenBalance(signer, account, setBalance, setError);
    }
  };

  const handleLogout = async () => {
    logout(
      setAccount,
      setProvider,
      setSigner,
      setIsConnected,
      setBalance,
      setStakedAmount,
      setStakingStart,
      setStakingRewards,
      setCurrentChainId,
      setError,
      setTxHash
    );
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <Card className="max-w-[39rem]">
        <CardHeader>
          <CardTitle>Web3 Token Dashboard</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {!isConnected ? (
            <Button
              onClick={handleConnectWallet}
              disabled={loading}
              className="w-full"
            >
              {loading ? "Conectando..." : "Conectar Wallet"}
            </Button>
          ) : (
            <>
              <div className="border-t pt-4 space-y-2">
                <div className="flex justify-between">
                  <span>Contrato ERC20:</span>
                  <span className="font-mono">{ERC20_ADDRESS}</span>
                </div>
                <div className="flex justify-between">
                  <span>Contrato Staking:</span>
                  <span className="font-mono">{STAKING_ADDRESS}</span>
                </div>
                <div className="flex justify-between">
                  <span>Contrato Faucet:</span>
                  <span className="font-mono">{FAUCET_ADDRESS}</span>
                </div>
              </div>
              <br></br>
              <br></br>

              <div className="flex justify-between">
                <span>Cuenta:</span>
                <span className="font-bold">{account}</span>
              </div>
              <div className="flex justify-between">
                <span>Balance:</span>
                <span className="font-bold">{balance.toFixed(2)} tokens</span>
              </div>
              <div className="flex justify-between">
                <span>Staked Amount:</span>
                <span className="font-bold">
                  {stakedAmount !== undefined && !isNaN(stakedAmount)
                    ? stakedAmount.toFixed(2)
                    : "0.00"}{" "}
                  tokens
                </span>
              </div>
              {stakingStart && (
                <div className="flex justify-between">
                  <span>Staking Time:</span>
                  <span className="font-bold">
                    {formatDistanceToNow(stakingStart)}
                  </span>
                </div>
              )}
              <div className="flex justify-between">
                <span>Staking Rewards:</span>
                <span className="font-bold">
                  {stakingRewards.toFixed(2)} tokens
                </span>
              </div>
              <div className="flex flex-col space-y-2">
                <Button
                  onClick={handleClaimtokens}
                  disabled={loading || currentChainId !== BigInt(targetChainId)}
                >
                  {loading ? "Reclamando..." : "Claim Tokens"}
                </Button>
                <input
                  type="number"
                  value={stakeAmount}
                  onChange={(e) => setStakeAmount(Number(e.target.value))}
                  placeholder="Cantidad de tokens para stake"
                  className="w-full p-2 border rounded"
                />
                <Button
                  onClick={handleStake}
                  disabled={loading || currentChainId !== BigInt(targetChainId)}
                >
                  {loading
                    ? "Haciendo Stake..."
                    : `Stake ${stakeAmount} Tokens`}
                </Button>
                <input
                  type="number"
                  value={unstakeAmount}
                  onChange={(e) => setUnstakeAmount(Number(e.target.value))}
                  placeholder="Cantidad de tokens para unstake"
                  className="w-full p-2 border rounded"
                />
                <Button
                  onClick={handleUnstake}
                  disabled={loading || currentChainId !== BigInt(targetChainId)}
                >
                  {loading
                    ? "Haciendo Unstake..."
                    : `Unstake ${unstakeAmount} Tokens`}
                </Button>
                <Button
                  onClick={handleLogout}
                  disabled={loading}
                  className="w-full mt-2 bg-red-500 hover:bg-red-600 text-white"
                >
                  {loading ? "Desconectando..." : "Logout"}
                </Button>
              </div>
            </>
          )}
          {/* {txHash && (
            <div className="p-3 bg-green-100 rounded">
              <p className="text-green-800">
                TransacciÃ³n enviada:{" "}
                <a
                  href={`https://etherscan.io/tx/${txHash}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="underline break-all"
                >
                  {txHash}
                </a>
              </p>
            </div>
          )} */}
          {error && (
            <p className="text-red-500" role="alert">
              {error}
            </p>
          )}
          {currentChainId !== BigInt(targetChainId) && (
            <p className="text-orange-500" role="alert">
              Cambia a la red de Hardhat para reclamar los tokens.
            </p>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

async function fetchStakedAmount(
  address: string,
  signer: ethers.JsonRpcSigner,
  setError: (msg: string) => void
): Promise<number> {
  try {
    const { fetchStakedAmount: originalFetch } = await import(
      "@/utils/web3Utils"
    );
    return await originalFetch(address, signer, setError);
  } catch (err) {
    console.error("Error al obtener el monto staked:", err);
    setError("No se pudo obtener el monto staked.");
    return 0;
  }
}


// Path: src/components/ui/button.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


// Path: src/components/ui/card.tsx

import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "w-full max-w-2xl rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};


// Path: src/config.ts

import { http, createConfig, createStorage, createClient } from "wagmi";
import { mainnet, sepolia } from "wagmi/chains";
import { injected, metaMask, safe } from "wagmi/connectors";
import { defineChain } from "viem";

import { config as dotenvConfig } from "dotenv";
dotenvConfig();

// Definir la red personalizada localhost con chainId 41337
const localhost = defineChain({
  id: 41337,
  name: "Localhost 41337",
  network: "localhost",
  nativeCurrency: {
    name: "Ethereum",
    symbol: "ETH",
    decimals: 18,
  },
  rpcUrls: {
    default: {
      http: ["http://127.0.0.1:8545"], // URL de tu nodo local (Hardhat, Ganache, etc.)
    },
    public: {
      http: ["http://127.0.0.1:8545"],
    },
  },
  blockExplorers: {
    default: { name: "Localhost Explorer", url: "http://127.0.0.1:8545" },
  },
  testnet: true, // Marcar como testnet
});

// Definir la Fantom testnet (chainId: 4002)
const fantomTestnet = defineChain({
  id: 4002,
  name: "Fantom Testnet",
  network: "fantom-testnet",
  nativeCurrency: {
    name: "Fantom",
    symbol: "FTM",
    decimals: 18,
  },
  rpcUrls: {
    default: {
      http: ["https://rpc.testnet.fantom.network"], // URL RPC de la fantom testnet
    },
    public: {
      http: ["https://rpc.testnet.fantom.network"],
    },
  },
  blockExplorers: {
    default: {
      name: "Fantom Testnet Explorer",
      url: "https://explorer.testnet.fantom.network/",
    },
  },
  testnet: true,
});

// Configurar wagmi con las cadenas
export const config = createConfig({
  chains: [mainnet, sepolia], //localhost], // Agregar la red localhost

  multiInjectedProviderDiscovery: false,
  ssr: false, // is in server side rendering?
  // storage: createStorage({ storage: window.localStorage }),
  connectors: [injected(), metaMask(), safe()],
  // connectors: [metaMask(), safe()],
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http(),
    [fantomTestnet.id]: http(), // Agregar transport para Fantom testnet
    // Si quieres volver a incluir localhost:
    [localhost.id]: http(),
  },
});

const targetNetwork = process.env.NEXT_PUBLIC_TARGET_NETWORK || "localhost";

let ERC20_ADDRESS = "";
let STAKING_ADDRESS = "";
let FAUCET_ADDRESS = "";
let targetChainId: bigint;

switch (targetNetwork) {
  case "fantomTestnet":
    ERC20_ADDRESS = process.env.NEXT_PUBLIC_FANTOM_TESTNET_ERC20_ADDRESS || "";
    STAKING_ADDRESS =
      process.env.NEXT_PUBLIC_FANTOM_TESTNET_STAKING_ADDRESS || "";
    FAUCET_ADDRESS =
      process.env.NEXT_PUBLIC_FANTOM_TESTNET_FAUCET_ADDRESS || "";
    targetChainId = 4002n;
    break;
  case "localhost":
  default:
    ERC20_ADDRESS = process.env.NEXT_PUBLIC_LOCAL_ERC20_ADDRESS || "";
    STAKING_ADDRESS = process.env.NEXT_PUBLIC_LOCAL_STAKING_ADDRESS || "";
    FAUCET_ADDRESS = process.env.NEXT_PUBLIC_LOCAL_FAUCET_ADDRESS || "";
    targetChainId = 41337n;
    break;
}

export { ERC20_ADDRESS, STAKING_ADDRESS, FAUCET_ADDRESS, targetChainId };


// Path: src/lib/utils.ts

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


// Path: src/utils/web3Utils.ts

/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unsafe-function-type */
//utils/web3Utils.ts

import { ethers } from "ethers";
import Web3Modal, { IProviderOptions, IProviderDisplay } from "web3modal";
import tokenAbi from "../../../abis/MyToken.json";
import faucetAbi from "../../../abis/Faucet.json";
import stakingAbi from "../../../abis/Staking.json";

import { ERC20_ADDRESS, STAKING_ADDRESS, FAUCET_ADDRESS } from "../config";

function createProviderOptions(): IProviderOptions {
  return {
    injected: {
      package: null,
      display: {
        name: "MetaMask",
        description: "Connect with MetaMask",
      } as IProviderDisplay,
      connector: async () => {
        // Ensure MetaMask is available
        if (window.ethereum && window.ethereum.isMetaMask) {
          return window.ethereum;
        }
        throw new Error("MetaMask not found");
      },
    },
  };
}

async function connectWithTimeout(
  web3Modal: Web3Modal,
  timeout: number = 10000
): Promise<any> {
  return new Promise(async (resolve, reject) => {
    const timer = setTimeout(() => {
      reject(new Error("Connection timeout"));
    }, timeout);

    try {
      const instance = await web3Modal.connect();
      clearTimeout(timer);
      resolve(instance);
    } catch (error) {
      clearTimeout(timer);

      try {
        if (window.ethereum && window.ethereum.isMetaMask) {
          await window.ethereum.request({ method: "eth_requestAccounts" });
          resolve(window.ethereum);
          return;
        }
      } catch (fallbackError) {
        reject(fallbackError);
      }

      reject(error);
    }
  });
}

export const connectWallet = async (
  setProvider: (provider: ethers.BrowserProvider | null) => void,
  setSigner: (signer: ethers.JsonRpcSigner | null) => void,
  setAccount: (account: string | null) => void,
  setIsConnected: (isConnected: boolean) => void,
  setError: (error: string | null) => void,
  setCurrentChainId: (chain: bigint | null) => void,
  setStakedAmount: (amount: number) => void,
  setBalance: (balance: number) => void,
  desiredChainId: bigint
) => {
  console.log("Iniciando conexiÃ³n a la wallet...");
  try {
    const web3Modal = new Web3Modal({
      cacheProvider: true,
      providerOptions: createProviderOptions(),
      disableInjectedProvider: false,
    });

    console.log("Mostrando modal de conexiÃ³n...");
    const instance = await web3Modal.connect(); // AquÃ­ podrÃ­a fallar
    console.log("Modal cerrado, conexiÃ³n obtenida.");

    const provider = new ethers.BrowserProvider(instance);
    const signer = await provider.getSigner();
    const address = await signer.getAddress();
    const network = await provider.getNetwork();

    console.log("DirecciÃ³n obtenida:", address);
    console.log("Red actual:", network);

    // Cambiar de red si es necesario
    if (desiredChainId && network.chainId !== desiredChainId) {
      console.log("Cambiando a la red deseada...");
      const chainIdHex = `0x${desiredChainId.toString(16)}`;
      try {
        await window.ethereum.request({
          method: "wallet_switchEthereumChain",
          params: [{ chainId: chainIdHex }],
        });
      } catch (error: any) {
        if (error.code === 4902) {
          console.log("La red no estÃ¡ agregada, intentando agregarla...");
          await window.ethereum.request({
            method: "wallet_addEthereumChain",
            params: [
              {
                chainId: chainIdHex,
                chainName: "Fantom Testnet",
                nativeCurrency: {
                  name: "Fantom",
                  symbol: "FTM",
                  decimals: 18,
                },
                rpcUrls: ["https://rpc.testnet.fantom.network"],
                blockExplorerUrls: ["https://explorer.testnet.fantom.network/"],
              },
            ],
          });
        } else {
          console.error("Error al cambiar de red:", error);
          setError("No se pudo cambiar a la red deseada.");
          return;
        }
      }
    }

    setProvider(provider);
    setSigner(signer);
    setAccount(address);
    setIsConnected(true);
    setCurrentChainId(BigInt(desiredChainId));
    setError(null);

    console.log("ConexiÃ³n exitosa, obteniendo balance...");
    await fetchTokenBalance(signer, address, setBalance, setError);

    console.log("Obteniendo monto staked...");
    const stakedAmount = await fetchStakedAmount(address, signer, setError);
    setStakedAmount(stakedAmount);
  } catch (error: any) {
    console.error("Error en connectWallet:", error.message);
    setError("No se pudo conectar a la wallet.");
  }
};

export const fetchTokenBalance = async (
  signer: ethers.JsonRpcSigner,
  address: string,
  setBalance: Function,
  setError: Function
) => {
  try {
    console.log("fetchTokenBalance");
    const tokenContract = new ethers.Contract(
      ERC20_ADDRESS,
      tokenAbi.abi,
      signer
    );
    const balance = await tokenContract.balanceOf(address);
    console.log("balance: ", balance);
    setBalance(parseFloat(ethers.formatUnits(balance, 6)));
  } catch (err) {
    console.error("Error al obtener el balance del token:", err);
    setError("No se pudo obtener el balance del token.");
  }
};

export const fetchStakedAmount = async (
  address: string,
  signer: ethers.JsonRpcSigner,
  setError: (message: string) => void
): Promise<number> => {
  try {
    console.log("fetchStakedAmount");
    if (!ethers.isAddress(address)) {
      throw new Error("DirecciÃ³n invÃ¡lida.");
    }

    const stakingContract = new ethers.Contract(
      STAKING_ADDRESS,
      stakingAbi.abi,
      signer
    );

    const stakedAmount = await stakingContract.getStakedAmount(address);
    const staked = parseFloat(ethers.formatUnits(stakedAmount, 6));
    return staked;
  } catch (err) {
    console.error("Error al obtener el monto staked:", err);
    setError("No se pudo obtener el monto staked.");
    return 0;
  }
};

export const claimTokens = async (
  signer: ethers.JsonRpcSigner | null,
  provider: ethers.BrowserProvider | null,
  setLoading: Function,
  setError: Function,
  setTxHash: Function
) => {
  console.log("Iniciando el proceso de reclamo de tokens...");

  if (!signer || !provider) {
    console.error("No hay conexiÃ³n activa con una wallet.");
    setError("No estÃ¡s conectado a ninguna wallet.");
    return;
  }

  try {
    setLoading(true);
    setError(null);

    const userAddress = await signer.getAddress();
    console.log("DirecciÃ³n del usuario:", userAddress);

    const faucetContract = new ethers.Contract(
      FAUCET_ADDRESS,
      faucetAbi.abi,
      signer
    );

    console.log("Obteniendo estado inicial del contrato...");
    const contractBalance = await provider.getBalance(FAUCET_ADDRESS);
    console.log(
      "Balance del contrato del faucet (en wei):",
      contractBalance.toString()
    );

    // if (contractBalance === 0n) {
    //   console.error(
    //     "El contrato del faucet no tiene balance suficiente para reclamar tokens."
    //   );
    //   setError("El contrato del faucet no tiene balance suficiente.");
    //   return;
    // }

    console.log("Preparando para llamar al mÃ©todo claimTokens...");
    const tx = await faucetContract.claimTokens();
    console.log("TransacciÃ³n enviada. Hash:", tx.hash);

    console.log("Esperando la confirmaciÃ³n de la transacciÃ³n...");
    const receipt = await tx.wait();

    console.log("TransacciÃ³n confirmada. Receipt:", receipt);
    console.log(
      "Tokens reclamados exitosamente. Hash de la transacciÃ³n:",
      tx.hash
    );

    setTxHash(tx.hash);
  } catch (err: any) {
    if (err.code === 4001) {
      console.error("TransacciÃ³n rechazada por el usuario.");
      setError("TransacciÃ³n rechazada por el usuario.");
    } else {
      console.error("Error al intentar reclamar los tokens:", err);
      setError(err.message || "OcurriÃ³ un error al reclamar los tokens.");
    }
  } finally {
    console.log("Proceso de reclamo de tokens finalizado.");
    setLoading(false);
  }
};

export const approveTokens = async (
  amount: number,
  ERC20_ADDRESS: string,
  spenderAddress: string,
  signer: ethers.JsonRpcSigner
) => {
  console.log("Iniciando proceso de aprobaciÃ³n de tokens...");

  try {
    console.log(`Cantidad a aprobar: ${amount} tokens.`);
    console.log(`DirecciÃ³n del contrato ERC20: ${ERC20_ADDRESS}`);
    console.log(`DirecciÃ³n del gastador: ${spenderAddress}`);

    const tokenContract = new ethers.Contract(
      ERC20_ADDRESS,
      tokenAbi.abi,
      signer
    );

    console.log("Llamando a la funciÃ³n approve del contrato ERC20...");
    const tx = await tokenContract.approve(
      spenderAddress,
      ethers.parseUnits(amount.toString(), 6)
    );
    console.log("TransacciÃ³n enviada. Hash:", tx.hash);

    console.log("Esperando la confirmaciÃ³n de la transacciÃ³n...");
    const receipt = await tx.wait();

    console.log("TransacciÃ³n confirmada. Receipt:", receipt);
    console.log("Tokens aprobados exitosamente.");
  } catch (err) {
    console.error("Error durante el proceso de aprobaciÃ³n de tokens:", err);
    throw new Error(err.message || "No se pudo aprobar los tokens.");
  }
};

export const stakeTokens = async (
  signer: ethers.JsonRpcSigner | null,
  provider: ethers.BrowserProvider | null,
  amount: number,
  setLoading: Function,
  setError: Function,
  setTxHash: Function,
  setStakedAmount: Function,
  setStakingStart: Function
) => {
  console.log("stakeTokens");
  if (!signer || !provider) {
    setError("No estÃ¡s conectado a ninguna wallet.");
    return;
  }

  const stakingContract = new ethers.Contract(
    STAKING_ADDRESS,
    stakingAbi.abi,
    signer
  );
  const amountInTokens = ethers.parseUnits(amount.toString(), 6);

  try {
    setLoading(true);
    setError(null);

    await approveTokens(amount, ERC20_ADDRESS, STAKING_ADDRESS, signer);
    const tx = await stakingContract.stake(amountInTokens);
    const receipt = await tx.wait();

    console.log("TransacciÃ³n enviada:", tx);
    console.log("Receipt:", receipt);

    setTxHash(tx.hash);
    setStakedAmount((prev: number) => prev + amount);
    setStakingStart(new Date());
  } catch (err: any) {
    console.error("Error en stakeTokens:", err);
    setError(err.message || "OcurriÃ³ un error al hacer stake de los tokens.");
  } finally {
    setLoading(false);
  }
};

export const unstakeTokens = async (
  signer: ethers.JsonRpcSigner | null,
  provider: ethers.BrowserProvider | null,
  amount: number,
  setLoading: Function,
  setError: Function,
  setTxHash: Function,
  setStakedAmount: Function,
  setStakingStart: Function,
  setStakingRewards: Function
) => {
  console.log("Iniciando proceso de unstakeTokens...");
  if (!signer || !provider) {
    setError("No estÃ¡s conectado a ninguna wallet.");
    return;
  }

  const stakingContract = new ethers.Contract(
    STAKING_ADDRESS,
    stakingAbi.abi,
    signer
  );

  try {
    setLoading(true);
    setError(null);

    const userAddress = await signer.getAddress();
    console.log("DirecciÃ³n del usuario:", userAddress);

    const stakedAmountBigNumber: bigint = await stakingContract.getStakedAmount(
      userAddress
    );
    console.log(
      "Monto staked actual (en wei):",
      stakedAmountBigNumber.toString()
    );

    const stakedAmount = parseFloat(
      ethers.formatUnits(stakedAmountBigNumber, 6)
    );
    console.log("Monto staked actual (formateado):", stakedAmount);

    console.log(`Intentando hacer unstake de ${amount} tokens.`);

    const stakingContractBalance = await checkStakingContractBalance(
      signer,
      setError
    );
    console.log(
      "Balance del contrato de staking disponible:",
      stakingContractBalance
    );

    if (amount > stakedAmount) {
      setError(
        "No tienes suficientes tokens apostados para realizar esta operaciÃ³n."
      );
      setLoading(false);
      return;
    }

    const valueToUnstake = ethers.parseUnits(amount.toString(), 6);
    console.log("Cantidad a desapostar (en wei):", valueToUnstake.toString());

    const tx = await stakingContract.unstake(valueToUnstake);
    const receipt = await tx.wait();

    console.log("TransacciÃ³n enviada:", tx);
    console.log("Receipt:", receipt);

    setTxHash(tx.hash);
    setStakedAmount((prev: number) => prev - amount);

    if (amount >= stakedAmount) {
      setStakingStart(null);
      setStakingRewards(0);
    }
  } catch (err: any) {
    console.error("Error en unstakeTokens:", err);
    setError(err.message || "OcurriÃ³ un error al hacer unstake de los tokens.");
  } finally {
    setLoading(false);
  }
};

export const checkStakingContractBalance = async (
  signer: ethers.JsonRpcSigner,
  setError: Function
) => {
  try {
    const tokenContract = new ethers.Contract(
      ERC20_ADDRESS,
      tokenAbi.abi,
      signer
    );
    const stakingBalance = await tokenContract.balanceOf(STAKING_ADDRESS);
    console.log(
      "Balance del contrato de staking (en wei):",
      stakingBalance.toString()
    );

    const stakingBalanceFormatted = parseFloat(
      ethers.formatUnits(stakingBalance, 6)
    );
    console.log(
      "Balance del contrato de staking (formateado):",
      stakingBalanceFormatted
    );

    return stakingBalanceFormatted;
  } catch (err) {
    console.error("Error al obtener el balance del contrato de staking:", err);
    setError("No se pudo obtener el balance del contrato de staking.");
    return 0;
  }
};

export const logout = (
  setAccount: Function,
  setProvider: Function,
  setSigner: Function,
  setIsConnected: Function,
  setBalance: Function,
  setStakedAmount: Function,
  setStakingStart: Function,
  setStakingRewards: Function,
  setCurrentChainId: Function,
  setError: Function,
  setTxHash: Function
) => {
  setAccount(null);
  setProvider(null);
  setSigner(null);
  setIsConnected(false);
  setBalance(0);
  setStakedAmount(0);
  setStakingStart(null);
  setStakingRewards(0);
  setCurrentChainId(null);
  setError(null);
  setTxHash(null);
};


