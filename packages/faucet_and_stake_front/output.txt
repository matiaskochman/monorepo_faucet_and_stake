// Path: .env

# Red objetivo
NEXT_PUBLIC_TARGET_NETWORK="fantomTestnet"

# Direcciones para fantomTestnet
NEXT_PUBLIC_FANTOM_TESTNET_ERC20_ADDRESS="0x73C4EFcCb0340bdFd2C0d8B401f4A7CfBc07fd07"
NEXT_PUBLIC_FANTOM_TESTNET_STAKING_ADDRESS="0xD233A182c5A89280457a68B23C761AaE9fe3D765"
NEXT_PUBLIC_FANTOM_TESTNET_FAUCET_ADDRESS="0x539383726418f2F903dFa775f9D3D25AeE7E602A"

# Direcciones para localhost
NEXT_PUBLIC_LOCAL_ERC20_ADDRESS="0x5FbDB2315678afecb367f032d93F642f64180aa3"
NEXT_PUBLIC_LOCAL_STAKING_ADDRESS="0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
NEXT_PUBLIC_LOCAL_FAUCET_ADDRESS="0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"

# Direcciones para sepolia
NEXT_PUBLIC_SEPOLIA_ERC20_ADDRESS="0x5FbDB2315678afecb367f032d93F642f64180aa3"
NEXT_PUBLIC_SEPOLIA_STAKING_ADDRESS="0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
NEXT_PUBLIC_SEPOLIA_FAUCET_ADDRESS="0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"


// Path: package.json

{
  "name": "token_erc20_nextjs_faucet",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-slot": "^1.1.0",
    "@shadcn/ui": "^0.0.4",
    "@tanstack/react-query": "^5.59.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "dotenv": "^16.4.7",
    "ethers": "^6.13.3",
    "install": "^0.13.0",
    "lucide-react": "^0.454.0",
    "next": "14.2.14",
    "npm": "^10.8.3",
    "react": "^18",
    "react-dom": "^18",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7",
    "viem": "^2.21.17",
    "wagmi": "^2.12.16",
    "web3modal": "^1.9.12"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.2.14",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}


// Path: src/app/components/Profile.tsx

"use client";
import { useAccount, useEnsName } from "wagmi";

export function Profile() {
  const { address } = useAccount();
  const { data, error, status } = useEnsName({ address });
  if (status === "pending") return <div>Loading ENS name</div>;
  if (status === "error")
    return <div>Error fetching ENS name: {error.message}</div>;
  return <div>ENS name: {data}</div>;
}


// Path: src/app/components/ReadContract.tsx

import { useReadContract } from "wagmi";
import { config } from "../../config";
export function ReadContract() {
  const { data: balance } = useReadContract({
    ...config,
    functionName: "balanceOf",
    args: ["0x03A71968491d55603FFe1b11A9e23eF013f75bCF"],
  });

  return <div>Balance: {balance?.toString()}</div>;
}


// Path: src/app/components/WagmiClientProvider.tsx

"use client";

import { WagmiProvider } from "wagmi";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { config } from "../../config";

const queryClient = new QueryClient();
export function WagmiClientProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  );
}


// Path: src/app/components/WalletOptions.tsx

import * as React from "react";
import { useConnect } from "wagmi";

export function WalletOptions() {
  const { connectors, connect } = useConnect();

  return connectors.map((connector) => (
    <button key={connector.uid} onClick={() => connect({ connector })}>
      {connector.name}
    </button>
  ));
}


// Path: src/app/page copy.tsx

// Path: src/app/page.tsx

// "use client";

// import { useState, useEffect } from "react";
// import {
//   useAccount,
//   useConnect,
//   useDisconnect,
//   useWriteContract,
//   // useWalletClient,
//   // usePublicClient,
// } from "wagmi";
// import { Button } from "@/components/ui/button";
// import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
// import { formatDistanceToNow } from "date-fns";
// import { ethers } from "ethers";
// import {
//   ERC20_ADDRESS,
//   STAKING_ADDRESS,
//   FAUCET_ADDRESS,
//   targetChainId,
// } from "../config";
// import {
//   fetchTokenBalance,
//   claimTokens,
//   stakeTokens,
//   unstakeTokens,
//   logout as logoutUtils,
// } from "@/utils/web3Utils";

// export default function Web3TokenDashboard() {
//   const account = useAccount();
//   const {
//     connectors,
//     connect,
//     status: connectStatus,
//     error: connectError,
//   } = useConnect();
//   const { disconnect } = useDisconnect();
//   const { data: hash, writeContract } = useWriteContract();
//   // useNetwork, useSwitchNetwork, useSigner están deprecados, así que:
//   // - La red actual la obtenemos de account.chainId
//   // - Para obtener un signer, lo crearemos manualmente desde window.ethereum cuando estemos conectados
//   // const { data: walletClient } = useWalletClient();
//   // const { data: publicClient } = usePublicClient();

//   const [signer, setSigner] = useState<ethers.JsonRpcSigner | null>(null);
//   const [balance, setBalance] = useState<number>(0);
//   const [stakedAmount, setStakedAmount] = useState<number>(0);
//   const [stakingStart, setStakingStart] = useState<Date | null>(null);
//   const [stakingRewards, setStakingRewards] = useState(0);
//   const [loading, setLoading] = useState(false);
//   const [error, setError] = useState<string | null>(null);
//   const [txHash, setTxHash] = useState<string | null>(null);
//   const [stakeAmount, setStakeAmount] = useState<number>(0);
//   const [unstakeAmount, setUnstakeAmount] = useState<number>(0);

//   // Función para obtener el staked amount utilizando la lógica existente
//   async function fetchStakedAmount(
//     address: string,
//     signer: ethers.JsonRpcSigner,
//     setError: (msg: string) => void
//   ): Promise<number> {
//     try {
//       const { fetchStakedAmount: originalFetch } = await import(
//         "@/utils/web3Utils"
//       );
//       return await originalFetch(address, signer, setError);
//     } catch (err) {
//       console.error("Error al obtener el monto staked:", err);
//       setError("No se pudo obtener el monto staked.");
//       return 0;
//     }
//   }

//   // Efecto para obtener el signer cuando el usuario está conectado
//   useEffect(() => {
//     if (
//       account.status === "connected" &&
//       typeof window !== "undefined" &&
//       (window as any).ethereum
//     ) {
//       const setupSigner = async () => {
//         const provider = new ethers.BrowserProvider((window as any).ethereum);
//         const signerInstance = await provider.getSigner();
//         setSigner(signerInstance);
//       };
//       setupSigner();
//     } else {
//       setSigner(null);
//     }
//   }, [account.status]);

//   // Al conectarnos, si tenemos signer y dirección, obtener datos iniciales
//   useEffect(() => {
//     if (account.status === "connected" && signer && account.address) {
//       const init = async () => {
//         setError(null);
//         await fetchTokenBalance(signer, account.address, setBalance, setError);
//         const staked = await fetchStakedAmount(
//           account.address,
//           signer,
//           setError
//         );
//         setStakedAmount(staked);
//       };
//       init();
//     } else {
//       setBalance(0);
//       setStakedAmount(0);
//       setStakingStart(null);
//       setStakingRewards(0);
//       setError(null);
//       setTxHash(null);
//     }
//   }, [account.status, signer, account.address]);

//   const handleConnectWallet = async (connectorId?: string) => {
//     const connector = connectorId
//       ? connectors.find((c) => c.id === connectorId)
//       : connectors.find((c) => c.ready && c.id === "metaMask") || connectors[0];
//     if (connector) {
//       connect({ connector });
//     }
//   };

//   const handleLogout = () => {
//     disconnect();
//     logoutUtils(
//       () => null,
//       () => null,
//       () => null,
//       () => null,
//       setBalance,
//       setStakedAmount,
//       setStakingStart,
//       setStakingRewards,
//       () => null,
//       setError,
//       setTxHash
//     );
//   };

//   const handleClaimTokens = async () => {
//     if (!signer || !account.address) return;
//     setLoading(true);
//     await claimTokens(
//       signer,
//       // await signer.provider,
//       setLoading,
//       setError,
//       setTxHash
//     );
//     await fetchTokenBalance(signer, account.address, setBalance, setError);
//     setLoading(false);
//   };

//   const handleStake = async () => {
//     if (!signer || !account.address) return;
//     setLoading(true);
//     await stakeTokens(
//       signer,
//       writeContract,
//       stakeAmount,
//       setLoading,
//       setError,
//       setTxHash,
//       setStakedAmount,
//       setStakingStart
//     );
//     await fetchTokenBalance(signer, account.address, setBalance, setError);
//     setLoading(false);
//   };

//   const handleUnstake = async () => {
//     if (!signer || !account.address) return;
//     setLoading(true);
//     await unstakeTokens(
//       signer,
//       // await signer.provider,
//       unstakeAmount,
//       setLoading,
//       setError,
//       setTxHash,
//       setStakedAmount,
//       setStakingStart,
//       setStakingRewards
//     );
//     await fetchTokenBalance(signer, account.address, setBalance, setError);
//     setLoading(false);
//   };

//   // Validar si estamos en la red correcta
//   const currentChainId = account.chainId;
//   const isOnTargetChain = currentChainId === Number(targetChainId);

//   return (
//     <div className="flex items-center justify-center min-h-screen bg-gray-100">
//       <Card className="max-w-[39rem]">
//         <CardHeader>
//           <CardTitle>Web3 Token Dashboard</CardTitle>
//         </CardHeader>
//         <CardContent className="space-y-4">
//           {/* Información de cuenta */}
//           <div>
//             <h2 className="font-bold text-lg">Account</h2>
//             <div>
//               status: {account.status}
//               <br />
//               address: {account.address || "N/A"}
//               <br />
//               chainId: {currentChainId ? currentChainId : "N/A"}
//             </div>
//             {account.status === "connected" && (
//               <Button
//                 type="button"
//                 onClick={handleLogout}
//                 className="mt-2 bg-red-500 hover:bg-red-600 text-white"
//               >
//                 Disconnect
//               </Button>
//             )}
//           </div>

//           {/* Conexión a la wallet */}
//           {account.status !== "connected" && (
//             <div>
//               <h2 className="font-bold text-lg">Connect</h2>
//               {connectors.map((connector) => (
//                 <Button
//                   key={connector.uid}
//                   onClick={() => handleConnectWallet(connector.id)}
//                   type="button"
//                   className="mr-2"
//                   disabled={!connector.ready}
//                 >
//                   {connector.name}
//                 </Button>
//               ))}
//               <div>{connectStatus}</div>
//               {connectError && (
//                 <div className="text-red-500">{connectError.message}</div>
//               )}
//             </div>
//           )}

//           {/* Dashboard si está conectado */}
//           {account.status === "connected" && signer && (
//             <>
//               <div className="border-t pt-4 space-y-2">
//                 <div className="flex justify-between">
//                   <span>Contrato ERC20:</span>
//                   <span className="font-mono">{ERC20_ADDRESS}</span>
//                 </div>
//                 <div className="flex justify-between">
//                   <span>Contrato Staking:</span>
//                   <span className="font-mono">{STAKING_ADDRESS}</span>
//                 </div>
//                 <div className="flex justify-between">
//                   <span>Contrato Faucet:</span>
//                   <span className="font-mono">{FAUCET_ADDRESS}</span>
//                 </div>
//               </div>

//               <div className="flex justify-between">
//                 <span>Balance:</span>
//                 <span className="font-bold">{balance.toFixed(2)} tokens</span>
//               </div>
//               <div className="flex justify-between">
//                 <span>Staked Amount:</span>
//                 <span className="font-bold">
//                   {stakedAmount !== undefined && !isNaN(stakedAmount)
//                     ? stakedAmount.toFixed(2)
//                     : "0.00"}{" "}
//                   tokens
//                 </span>
//               </div>
//               {stakingStart && (
//                 <div className="flex justify-between">
//                   <span>Staking Time:</span>
//                   <span className="font-bold">
//                     {formatDistanceToNow(stakingStart)}
//                   </span>
//                 </div>
//               )}
//               <div className="flex justify-between">
//                 <span>Staking Rewards:</span>
//                 <span className="font-bold">
//                   {stakingRewards.toFixed(2)} tokens
//                 </span>
//               </div>

//               <div className="flex flex-col space-y-2">
//                 <Button
//                   onClick={handleClaimTokens}
//                   disabled={loading || !isOnTargetChain}
//                 >
//                   {loading ? "Reclamando..." : "Claim Tokens"}
//                 </Button>
//                 <input
//                   type="number"
//                   value={stakeAmount}
//                   onChange={(e) => setStakeAmount(Number(e.target.value))}
//                   placeholder="Cantidad de tokens para stake"
//                   className="w-full p-2 border rounded"
//                 />
//                 <Button
//                   onClick={handleStake}
//                   disabled={loading || !isOnTargetChain}
//                 >
//                   {loading
//                     ? "Haciendo Stake..."
//                     : `Stake ${stakeAmount} Tokens`}
//                 </Button>
//                 <input
//                   type="number"
//                   value={unstakeAmount}
//                   onChange={(e) => setUnstakeAmount(Number(e.target.value))}
//                   placeholder="Cantidad de tokens para unstake"
//                   className="w-full p-2 border rounded"
//                 />
//                 <Button
//                   onClick={handleUnstake}
//                   disabled={loading || !isOnTargetChain}
//                 >
//                   {loading
//                     ? "Haciendo Unstake..."
//                     : `Unstake ${unstakeAmount} Tokens`}
//                 </Button>
//               </div>
//               {error && (
//                 <p className="text-red-500" role="alert">
//                   {error}
//                 </p>
//               )}
//               {!isOnTargetChain && (
//                 <p className="text-orange-500" role="alert">
//                   Cambia a la red objetivo para reclamar los tokens.
//                 </p>
//               )}
//             </>
//           )}
//         </CardContent>
//       </Card>
//     </div>
//   );
// }

"use client";
import { useState, useEffect } from "react";
import {
  useAccount,
  useConnect,
  useDisconnect,
  useReadContract,
  useWriteContract,
} from "wagmi";
import {
  // connectWallet,
  fetchTokenBalance,
  claimTokens,
  stakeTokens,
  unstakeTokens,
  logout,
} from "@/utils/web3Utils";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { formatDistanceToNow } from "date-fns";
import { ethers } from "ethers";
// import Web3Modal from "web3modal";
import {
  ERC20_ADDRESS,
  STAKING_ADDRESS,
  FAUCET_ADDRESS,
  targetChainId,
} from "../config";

console.log("ERC20_ADDRESS:", ERC20_ADDRESS);
console.log("STAKING_ADDRESS:", STAKING_ADDRESS);
console.log("FAUCET_ADDRESS:", FAUCET_ADDRESS);

export default function Web3TokenDashboard() {
  const [balance, setBalance] = useState<number>(0);
  const [stakedAmount, setStakedAmount] = useState<number>(0);
  const [stakingStart, setStakingStart] = useState<Date | null>(null);
  const [stakingRewards, setStakingRewards] = useState(0);
  const [loading, setLoading] = useState(false);
  // const [error, setError] = useState<string | null>(null);
  const [txHash, setTxHash] = useState<string | null>(null);
  const [currentChainId, setCurrentChainId] = useState<bigint | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  // const [account, setAccount] = useState<string | null>(null);
  const [provider, setProvider] = useState<ethers.BrowserProvider | null>(null);
  const [signer, setSigner] = useState<ethers.JsonRpcSigner | null>(null);
  const [stakeAmount, setStakeAmount] = useState<number>(0);
  const [unstakeAmount, setUnstakeAmount] = useState<number>(0);

  const account = useAccount();
  const { connectors, connect, status, error } = useConnect();
  const { disconnect } = useDisconnect();
  const { data: hash, writeContract } = useWriteContract();
  // useEffect(() => {
  //   const init = async () => {
  //     const web3Modal = new Web3Modal({ cacheProvider: true });
  //     if (web3Modal.cachedProvider) {
  //       await connectWallet(
  //         setProvider,
  //         setSigner,
  //         setAccount,
  //         setIsConnected,
  //         setError,
  //         setCurrentChainId,
  //         setStakedAmount,
  //         setBalance,
  //         BigInt(targetChainId)
  //       );
  //     } else {
  //       setIsConnected(false);
  //       setAccount(null);
  //     }
  //   };

  //   init();
  // }, []);

  // useEffect(() => {
  //   if (window.ethereum) {
  //     const handleAccountsChanged = async (accounts: string[]) => {
  //       if (accounts.length > 0) {
  //         setAccount(accounts[0]);
  //         console.log("Dirección del usuario:", accounts[0]);

  //         if (signer && provider) {
  //           await fetchTokenBalance(signer, accounts[0], setBalance, setError);
  //           const staked = await fetchStakedAmount(
  //             accounts[0],
  //             signer,
  //             setError
  //           );
  //           setStakedAmount(staked);
  //         } else {
  //           await connectWallet(
  //             setProvider,
  //             setSigner,
  //             setAccount,
  //             setIsConnected,
  //             setError,
  //             setCurrentChainId,
  //             setStakedAmount,
  //             setBalance,
  //             BigInt(targetChainId)
  //           );
  //         }
  //       } else {
  //         handleLogout();
  //       }
  //     };

  //     window.ethereum.on("accountsChanged", handleAccountsChanged);
  //     return () => {
  //       window.ethereum.removeListener(
  //         "accountsChanged",
  //         handleAccountsChanged
  //       );
  //     };
  //   }
  // }, [signer, provider]);

  const handleClaimtokens = async () => {
    setLoading(true);
    // await claimTokens(signer, provider, setLoading, setError, setTxHash);
    await claimTokens(signer, provider, setLoading, setError, setTxHash);
    if (provider && signer && account) {
      await fetchTokenBalance(signer, account, setBalance, setError);
    }
    setLoading(false);
  };

  // const handleConnectWallet = async () => {
  //   setLoading(true);
  //   await connectWallet(
  //     setProvider,
  //     setSigner,
  //     setAccount,
  //     setIsConnected,
  //     setError,
  //     setCurrentChainId,
  //     setStakedAmount,
  //     setBalance,
  //     BigInt(targetChainId)
  //   );
  //   setLoading(false);

  //   if (provider && signer && account) {
  //     await fetchTokenBalance(signer, account, setBalance, setError);
  //   }
  // };

  const handleUnstake = async () => {
    await unstakeTokens(
      signer,
      provider,
      unstakeAmount,
      setLoading,
      setError,
      setTxHash,
      setStakedAmount,
      setStakingStart,
      setStakingRewards
    );
    if (provider && signer && account) {
      await fetchTokenBalance(signer, account, setBalance, setError);
    }
  };

  const handleStake = async () => {
    await stakeTokens(
      signer,
      provider,
      stakeAmount,
      setLoading,
      setError,
      setTxHash,
      setStakedAmount,
      setStakingStart
    );
    if (provider && signer && account) {
      await fetchTokenBalance(signer, account, setBalance, setError);
    }
  };

  const handleLogout = async () => {
    logout(
      setAccount,
      setProvider,
      setSigner,
      setIsConnected,
      setBalance,
      setStakedAmount,
      setStakingStart,
      setStakingRewards,
      setCurrentChainId,
      setError,
      setTxHash
    );
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <Card className="max-w-[39rem]">
        <CardHeader>
          <CardTitle>Web3 Token Dashboard</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {!isConnected ? (
            connectors.map((connector) => (
              <button
                key={connector.uid}
                onClick={() => connect({ connector })}
                type="button"
              >
                {connector.name}
              </button>
            ))
          ) : (
            <>
              <div className="border-t pt-4 space-y-2">
                <div className="flex justify-between">
                  <span>Contrato ERC20:</span>
                  <span className="font-mono">{ERC20_ADDRESS}</span>
                </div>
                <div className="flex justify-between">
                  <span>Contrato Staking:</span>
                  <span className="font-mono">{STAKING_ADDRESS}</span>
                </div>
                <div className="flex justify-between">
                  <span>Contrato Faucet:</span>
                  <span className="font-mono">{FAUCET_ADDRESS}</span>
                </div>
              </div>
              <br></br>
              <br></br>
              <div>
                status: {account.status}
                <br />
                addresses: {JSON.stringify(account.addresses)}
                <br />
                chainId: {account.chainId}
              </div>
              <div className="flex justify-between">
                <span>Cuenta:</span>
                <span className="font-bold">{account}</span>
              </div>
              <div className="flex justify-between">
                <span>Balance:</span>
                <span className="font-bold">{balance.toFixed(2)} tokens</span>
              </div>
              <div className="flex justify-between">
                <span>Staked Amount:</span>
                <span className="font-bold">
                  {stakedAmount !== undefined && !isNaN(stakedAmount)
                    ? stakedAmount.toFixed(2)
                    : "0.00"}{" "}
                  tokens
                </span>
              </div>
              {stakingStart && (
                <div className="flex justify-between">
                  <span>Staking Time:</span>
                  <span className="font-bold">
                    {formatDistanceToNow(stakingStart)}
                  </span>
                </div>
              )}
              <div className="flex justify-between">
                <span>Staking Rewards:</span>
                <span className="font-bold">
                  {stakingRewards.toFixed(2)} tokens
                </span>
              </div>
              <div className="flex flex-col space-y-2">
                <Button
                  onClick={handleClaimtokens}
                  disabled={loading || currentChainId !== BigInt(targetChainId)}
                >
                  {loading ? "Reclamando..." : "Claim Tokens"}
                </Button>
                <input
                  type="number"
                  value={stakeAmount}
                  onChange={(e) => setStakeAmount(Number(e.target.value))}
                  placeholder="Cantidad de tokens para stake"
                  className="w-full p-2 border rounded"
                />
                <Button
                  onClick={handleStake}
                  disabled={loading || currentChainId !== BigInt(targetChainId)}
                >
                  {loading
                    ? "Haciendo Stake..."
                    : `Stake ${stakeAmount} Tokens`}
                </Button>
                <input
                  type="number"
                  value={unstakeAmount}
                  onChange={(e) => setUnstakeAmount(Number(e.target.value))}
                  placeholder="Cantidad de tokens para unstake"
                  className="w-full p-2 border rounded"
                />
                <Button
                  onClick={handleUnstake}
                  disabled={loading || currentChainId !== BigInt(targetChainId)}
                >
                  {loading
                    ? "Haciendo Unstake..."
                    : `Unstake ${unstakeAmount} Tokens`}
                </Button>
                <Button
                  onClick={handleLogout}
                  disabled={loading}
                  className="w-full mt-2 bg-red-500 hover:bg-red-600 text-white"
                >
                  {loading ? "Desconectando..." : "Logout"}
                </Button>
              </div>
            </>
          )}
          {/* {txHash && (
            <div className="p-3 bg-green-100 rounded">
              <p className="text-green-800">
                Transacción enviada:{" "}
                <a
                  href={`https://etherscan.io/tx/${txHash}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="underline break-all"
                >
                  {txHash}
                </a>
              </p>
            </div>
          )} */}
          {error && (
            <p className="text-red-500" role="alert">
              {error}
            </p>
          )}
          {currentChainId !== BigInt(targetChainId) && (
            <p className="text-orange-500" role="alert">
              Cambia a la red de Hardhat para reclamar los tokens.
            </p>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

async function fetchStakedAmount(
  address: string,
  signer: ethers.JsonRpcSigner,
  setError: (msg: string) => void
): Promise<number> {
  try {
    const { fetchStakedAmount: originalFetch } = await import(
      "@/utils/web3Utils"
    );
    return await originalFetch(address, signer, setError);
  } catch (err) {
    console.error("Error al obtener el monto staked:", err);
    setError("No se pudo obtener el monto staked.");
    return 0;
  }
}


// Path: src/app/page.tsx

"use client";

import { useState, useEffect } from "react";
import dynamic from "next/dynamic";
import {
  useAccount,
  useConnect,
  useDisconnect,
  // useReadContract,
  useWriteContract,
} from "wagmi";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ERC20_ADDRESS, STAKING_ADDRESS, FAUCET_ADDRESS } from "../config";

function App() {
  const [erc20TokenBalance, setErc20TokenBalance] = useState<number>(0);
  const [stakedAmount, setStakedAmount] = useState<number>(0);
  const [stakingStart, setStakingStart] = useState<Date | null>(null);
  const [stakingRewards, setStakingRewards] = useState(0);
  const [loading, setLoading] = useState(false);
  const [showError, setShowError] = useState<string | null>(null);

  const TokenBalance = dynamic(
    () =>
      import("../components/ui/TokenBalance").then((mod) => mod.TokenBalance),
    {
      ssr: false,
      loading: () => <div>Cargando balance...</div>, // Asegúrate de usar un fallback consistente
    }
  );

  const account = useAccount();

  const { connectors, connect, status, error } = useConnect();
  const { disconnect } = useDisconnect();
  const { data: hash, writeContract } = useWriteContract();

  // useEffect(() => {
  //   const init = async () => {
  //     await FetchTokenBalance(account, setErc20TokenBalance, setShowError);
  //   };

  //   init();
  // }, []);

  // await fetchTokenBalance(signer, account, setBalance, setError);
  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <Card className="max-w-[39rem]">
        <CardHeader>
          <CardTitle>Web3 Token Dashboard</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="border-t pt-4 space-y-2">
            <div className="flex justify-between">
              <span>Contrato ERC20:</span>
              <span className="font-mono">{ERC20_ADDRESS}</span>
            </div>
            <div className="flex justify-between">
              <span>Contrato Staking:</span>
              <span className="font-mono">{STAKING_ADDRESS}</span>
            </div>
            <div className="flex justify-between">
              <span>Contrato Faucet:</span>
              <span className="font-mono">{FAUCET_ADDRESS}</span>
            </div>
          </div>
          <div>
            <h2>Account</h2>
            <br />
            <div className="flex justify-between">
              <span>status:</span>
              <span className="font-mono">{account.status}</span>
            </div>
            <div className="flex justify-between">
              <span>addresses:</span>
              <span className="font-mono">
                {JSON.stringify(account.addresses)}
              </span>
            </div>
            <div className="flex justify-between">
              <span>chainId:</span>
              <span className="font-mono">{account.chainId}</span>
            </div>

            {account.status === "connected" && (
              <Button type="button" onClick={() => disconnect()}>
                Disconnect
              </Button>
            )}
          </div>

          <div>
            <h2>Connect</h2>
            {connectors.map((connector) => (
              <Button
                key={connector.uid}
                onClick={() => connect({ connector })}
                type="button"
              >
                {connector.name}
              </Button>
            ))}
            <div>{status}</div>
            <div>{error?.message}</div>
          </div>
          {account?.status === "connected" && (
            <div>
              <TokenBalance address={account?.addresses[0]} />
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

export default App;


// Path: src/app/providers.tsx

"use client";

import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { type ReactNode, useState } from "react";
import { type State, WagmiProvider } from "wagmi";

import { getConfig } from "@/config";

export function Providers(props: {
  children: ReactNode;
  initialState?: State;
}) {
  const [config] = useState(() => getConfig());
  const [queryClient] = useState(() => new QueryClient());

  return (
    <WagmiProvider config={config} initialState={props.initialState}>
      <QueryClientProvider client={queryClient}>
        {props.children}
      </QueryClientProvider>
    </WagmiProvider>
  );
}


// Path: src/components/ui/TokenBalance.tsx

"use client";
import React, { useEffect, useState } from "react";
import { useReadContract } from "wagmi";
import { ethers } from "ethers";
import tokenAbi from "../../../../abis/MyToken.json";

const TokenBalance = ({ address }: { address: string }) => {
  const [balance, setBalance] = useState<number | null>(null);
  const [error, setError] = useState<string | null>(null);

  const contractAddress = "0x73C4EFcCb0340bdFd2C0d8B401f4A7CfBc07fd07";

  // Validación previa de la dirección
  useEffect(() => {
    if (!ethers.isAddress(address)) {
      setError(
        "Dirección inválida. Asegúrate de ingresar una dirección válida."
      );
    } else if (!ethers.isAddress(contractAddress)) {
      setError(
        "La dirección del contrato es inválida. Asegúrate de configurarla correctamente."
      );
    } else {
      setError(null); // Reinicia el error si ambas direcciones son válidas
    }
  }, [address, contractAddress]);

  const { data, error: contractError } = useReadContract({
    abi: tokenAbi.abi,
    address: contractAddress,
    functionName: "totalSupply",
    // functionName: "balanceOf",
    // args: [address],
  });

  useEffect(() => {
    if (contractError) {
      setError(`Error al leer el contrato: ${contractError.message}`);
    } else if (data) {
      try {
        const formattedBalance = parseFloat(ethers.formatUnits(data, 6));
        setBalance(formattedBalance);
      } catch (formatError) {
        setError("Error al formatear el balance recibido.");
      }
    }
  }, [data, contractError]);

  if (error) {
    return <div style={{ color: "red" }}>Error: {error}</div>;
  }

  return (
    <div>
      {balance !== null
        ? `Balance: ${balance.toLocaleString()} tokens`
        : "Cargando balance..."}
    </div>
  );
};

export { TokenBalance };


// Path: src/components/ui/button.tsx

"use client";
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = "Button";

export { Button, buttonVariants };


// Path: src/components/ui/card.tsx

"use client";
import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "w-full max-w-2xl rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};


// Path: src/config.ts

import { http, createConfig, createStorage, createClient } from "wagmi";
import { mainnet, sepolia } from "wagmi/chains";
import { injected, metaMask, safe } from "wagmi/connectors";
import { defineChain } from "viem";

import { config as dotenvConfig } from "dotenv";
dotenvConfig();

// Definir la red personalizada localhost con chainId 41337
const localhost = defineChain({
  id: 41337,
  name: "Localhost 41337",
  network: "localhost",
  nativeCurrency: {
    name: "Ethereum",
    symbol: "ETH",
    decimals: 18,
  },
  rpcUrls: {
    default: {
      http: ["http://127.0.0.1:8545"], // URL de tu nodo local (Hardhat, Ganache, etc.)
    },
    public: {
      http: ["http://127.0.0.1:8545"],
    },
  },
  blockExplorers: {
    default: { name: "Localhost Explorer", url: "http://127.0.0.1:8545" },
  },
  testnet: true, // Marcar como testnet
});

// Definir la Fantom testnet (chainId: 4002)
const fantomTestnet = defineChain({
  id: 4002,
  name: "Fantom Testnet",
  network: "fantom-testnet",
  nativeCurrency: {
    name: "Fantom",
    symbol: "FTM",
    decimals: 18,
  },
  rpcUrls: {
    default: {
      http: ["https://rpc.testnet.fantom.network"], // URL RPC de la fantom testnet
    },
    public: {
      http: ["https://rpc.testnet.fantom.network"],
    },
  },
  blockExplorers: {
    default: {
      name: "Fantom Testnet Explorer",
      url: "https://explorer.testnet.fantom.network/",
    },
  },
  testnet: true,
});

// Configurar wagmi con las cadenas
export const config = createConfig({
  chains: [mainnet, sepolia], //localhost], // Agregar la red localhost

  multiInjectedProviderDiscovery: false,
  ssr: false, // is in server side rendering?
  // storage: createStorage({ storage: window.localStorage }),
  connectors: [injected(), metaMask(), safe()],
  // connectors: [metaMask(), safe()],
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http(),
    [fantomTestnet.id]: http(), // Agregar transport para Fantom testnet
    // Si quieres volver a incluir localhost:
    [localhost.id]: http(),
  },
});

const targetNetwork = process.env.NEXT_PUBLIC_TARGET_NETWORK || "localhost";

let ERC20_ADDRESS = "";
let STAKING_ADDRESS = "";
let FAUCET_ADDRESS = "";
let targetChainId: bigint;

switch (targetNetwork) {
  case "fantomTestnet":
    ERC20_ADDRESS = process.env.NEXT_PUBLIC_FANTOM_TESTNET_ERC20_ADDRESS || "";
    STAKING_ADDRESS =
      process.env.NEXT_PUBLIC_FANTOM_TESTNET_STAKING_ADDRESS || "";
    FAUCET_ADDRESS =
      process.env.NEXT_PUBLIC_FANTOM_TESTNET_FAUCET_ADDRESS || "";
    targetChainId = 4002n;
    break;
    
  case "localhost":
  default:
    ERC20_ADDRESS = process.env.NEXT_PUBLIC_LOCAL_ERC20_ADDRESS || "";
    STAKING_ADDRESS = process.env.NEXT_PUBLIC_LOCAL_STAKING_ADDRESS || "";
    FAUCET_ADDRESS = process.env.NEXT_PUBLIC_LOCAL_FAUCET_ADDRESS || "";
    targetChainId = 41337n;
    break;
}

export { ERC20_ADDRESS, STAKING_ADDRESS, FAUCET_ADDRESS, targetChainId };

export function getConfig() {
  return config;
}


// Path: src/lib/utils.ts

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


// Path: src/utils/web3Utils.ts

/* eslint-disable react-hooks/rules-of-hooks */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unsafe-function-type */
//utils/web3Utils.ts
"use client";

import { ethers } from "ethers";
// import { useReadContract } from "wagmi";
// import Web3Modal, { IProviderOptions, IProviderDisplay } from "web3modal";
import tokenAbi from "../../../abis/MyToken.json";
import faucetAbi from "../../../abis/Faucet.json";
import stakingAbi from "../../../abis/Staking.json";

import { ERC20_ADDRESS, STAKING_ADDRESS, FAUCET_ADDRESS } from "../config";
import { Config, UseAccountReturnType, UseReadContractParameters } from "wagmi";
import { WriteContractMutate } from "wagmi/query";
import { useReadContract } from "wagmi";
// function createProviderOptions(): IProviderOptions {
//   return {
//     injected: {
//       package: null,
//       display: {
//         name: "MetaMask",
//         description: "Connect with MetaMask",
//       } as IProviderDisplay,
//       connector: async () => {
//         // Ensure MetaMask is available
//         if (window.ethereum && window.ethereum.isMetaMask) {
//           return window.ethereum;
//         }
//         throw new Error("MetaMask not found");
//       },
//     },
//   };
// }

// export const connectWallet = async (
//   setProvider: (provider: ethers.BrowserProvider | null) => void,
//   setSigner: (signer: ethers.JsonRpcSigner | null) => void,
//   setAccount: (account: string | null) => void,
//   setIsConnected: (isConnected: boolean) => void,
//   setError: (error: string | null) => void,
//   setCurrentChainId: (chain: bigint | null) => void,
//   setStakedAmount: (amount: number) => void,
//   setBalance: (balance: number) => void,
//   desiredChainId: bigint
// ) => {
//   console.log("Iniciando conexión a la wallet...");
//   try {
//     const web3Modal = new Web3Modal({
//       cacheProvider: true,
//       providerOptions: createProviderOptions(),
//       disableInjectedProvider: false,
//     });

//     console.log("Mostrando modal de conexión...");
//     const instance = await web3Modal.connect(); // Aquí podría fallar
//     console.log("Modal cerrado, conexión obtenida.");

//     const provider = new ethers.BrowserProvider(instance);
//     const signer = await provider.getSigner();
//     const address = await signer.getAddress();
//     const network = await provider.getNetwork();

//     console.log("Dirección obtenida:", address);
//     console.log("Red actual:", network);

//     // Cambiar de red si es necesario
//     if (desiredChainId && network.chainId !== desiredChainId) {
//       console.log("Cambiando a la red deseada...");
//       const chainIdHex = `0x${desiredChainId.toString(16)}`;
//       try {
//         await window.ethereum.request({
//           method: "wallet_switchEthereumChain",
//           params: [{ chainId: chainIdHex }],
//         });
//       } catch (error: any) {
//         if (error.code === 4902) {
//           console.log("La red no está agregada, intentando agregarla...");
//           await window.ethereum.request({
//             method: "wallet_addEthereumChain",
//             params: [
//               {
//                 chainId: chainIdHex,
//                 chainName: "Fantom Testnet",
//                 nativeCurrency: {
//                   name: "Fantom",
//                   symbol: "FTM",
//                   decimals: 18,
//                 },
//                 rpcUrls: ["https://rpc.testnet.fantom.network"],
//                 blockExplorerUrls: ["https://explorer.testnet.fantom.network/"],
//               },
//             ],
//           });
//         } else {
//           console.error("Error al cambiar de red:", error);
//           setError("No se pudo cambiar a la red deseada.");
//           return;
//         }
//       }
//     }

//     setProvider(provider);
//     setSigner(signer);
//     setAccount(address);
//     setIsConnected(true);
//     setCurrentChainId(BigInt(desiredChainId));
//     setError(null);

//     console.log("Conexión exitosa, obteniendo balance...");
//     await fetchTokenBalance(signer, address, setBalance, setError);

//     console.log("Obteniendo monto staked...");
//     const stakedAmount = await fetchStakedAmount(address, signer, setError);
//     setStakedAmount(stakedAmount);
//   } catch (error: any) {
//     console.error("Error en connectWallet:", error.message);
//     setError("No se pudo conectar a la wallet.");
//   }
// };

// export const FetchTokenBalance = (
//   // useReadContract: UseReadContractParameters,
//   account: UseAccountReturnType<Config>,
//   setBalance: Function,
//   setShowError: Function
// ) => {
//   console.log("fetchTokenBalance");
//   // const tokenContract = new ethers.Contract(
//   //   ERC20_ADDRESS,
//   //   tokenAbi.abi,
//   //   signer
//   // );
//   // const balance = await tokenContract.balanceOf(address);
//   // console.log("balance: ", balance);
//   const { data: balance, error } = useReadContract({
//     ...tokenAbi.abi,
//     functionName: "balanceOf",
//     args: ["0x03A71968491d55603FFe1b11A9e23eF013f75bCF"],
//   });
//   if (error) {
//     setShowError(error);
//   }
//   setBalance(parseFloat(ethers.formatUnits(balance, 6)));
// };

// export const fetchStakedAmount = async (
//   address: string,
//   signer: ethers.JsonRpcSigner,
//   setError: (message: string) => void
// ): Promise<number> => {
//   try {
//     console.log("fetchStakedAmount");
//     if (!ethers.isAddress(address)) {
//       throw new Error("Dirección inválida.");
//     }

//     const stakingContract = new ethers.Contract(
//       STAKING_ADDRESS,
//       stakingAbi.abi,
//       signer
//     );

//     const stakedAmount = await stakingContract.getStakedAmount(address);
//     const staked = parseFloat(ethers.formatUnits(stakedAmount, 6));
//     return staked;
//   } catch (err) {
//     console.error("Error al obtener el monto staked:", err);
//     setError("No se pudo obtener el monto staked.");
//     return 0;
//   }
// };

// export const claimTokens = async (
//   signer: ethers.JsonRpcSigner | null,
//   provider: ethers.BrowserProvider | null,
//   setLoading: Function,
//   setError: Function,
//   setTxHash: Function
// ) => {
//   console.log("Iniciando el proceso de reclamo de tokens...");

//   if (!signer) {
//     console.error("No hay conexión activa con una wallet.");
//     setError("No estás conectado a ninguna wallet.");
//     return;
//   }

//   try {
//     setLoading(true);
//     setError(null);

//     const userAddress = await signer.getAddress();
//     console.log("Dirección del usuario:", userAddress);

//     const faucetContract = new ethers.Contract(
//       FAUCET_ADDRESS,
//       faucetAbi.abi,
//       signer
//     );

//     const balance = await faucetContract.balanceOf(address);

//     console.log("Obteniendo estado inicial del contrato...");
//     const contractBalance = await provider.getBalance(FAUCET_ADDRESS);
//     console.log(
//       "Balance del contrato del faucet (en wei):",
//       contractBalance.toString()
//     );

//     if (contractBalance === 0n) {
//       console.error(
//         "El contrato del faucet no tiene balance suficiente para reclamar tokens."
//       );
//       setError("El contrato del faucet no tiene balance suficiente.");
//       return;
//     }

//     console.log("Preparando para llamar al método claimTokens...");
//     const tx = await faucetContract.claimTokens();
//     console.log("Transacción enviada. Hash:", tx.hash);

//     console.log("Esperando la confirmación de la transacción...");
//     const receipt = await tx.wait();

//     console.log("Transacción confirmada. Receipt:", receipt);
//     console.log(
//       "Tokens reclamados exitosamente. Hash de la transacción:",
//       tx.hash
//     );

//     setTxHash(tx.hash);
//   } catch (err: any) {
//     if (err.code === 4001) {
//       console.error("Transacción rechazada por el usuario.");
//       setError("Transacción rechazada por el usuario.");
//     } else {
//       console.error("Error al intentar reclamar los tokens:", err);
//       setError(err.message || "Ocurrió un error al reclamar los tokens.");
//     }
//   } finally {
//     console.log("Proceso de reclamo de tokens finalizado.");
//     setLoading(false);
//   }
// };

// export const approveTokens = async (
//   amount: number,
//   ERC20_ADDRESS: string,
//   spenderAddress: string,
//   signer: ethers.JsonRpcSigner
// ) => {
//   console.log("Iniciando proceso de aprobación de tokens...");

//   try {
//     console.log(`Cantidad a aprobar: ${amount} tokens.`);
//     console.log(`Dirección del contrato ERC20: ${ERC20_ADDRESS}`);
//     console.log(`Dirección del gastador: ${spenderAddress}`);

//     const tokenContract = new ethers.Contract(
//       ERC20_ADDRESS,
//       tokenAbi.abi,
//       signer
//     );

//     console.log("Llamando a la función approve del contrato ERC20...");
//     const tx = await tokenContract.approve(
//       spenderAddress,
//       ethers.parseUnits(amount.toString(), 6)
//     );
//     console.log("Transacción enviada. Hash:", tx.hash);

//     console.log("Esperando la confirmación de la transacción...");
//     const receipt = await tx.wait();

//     console.log("Transacción confirmada. Receipt:", receipt);
//     console.log("Tokens aprobados exitosamente.");
//   } catch (err: any) {
//     console.error("Error durante el proceso de aprobación de tokens:", err);
//     throw new Error(err.message || "No se pudo aprobar los tokens.");
//   }
// };

// export const stakeTokens = async (
//   signer: ethers.JsonRpcSigner | null,
//   writeContract: WriteContractMutate<Config, unknown>,
//   amount: number,
//   setLoading: Function,
//   setError: Function,
//   setTxHash: Function,
//   setStakedAmount: Function,
//   setStakingStart: Function
// ) => {
//   console.log("stakeTokens");
//   if (!signer) {
//     setError("No estás conectado a ninguna wallet.");
//     return;
//   }

//   const stakingContract = new ethers.Contract(
//     STAKING_ADDRESS,
//     stakingAbi.abi,
//     signer
//   );
//   const amountInTokens = ethers.parseUnits(amount.toString(), 6);

//   try {
//     setLoading(true);
//     setError(null);

//     await approveTokens(amount, ERC20_ADDRESS, STAKING_ADDRESS, signer);
//     const tx = await stakingContract.stake(amountInTokens);
//     const receipt = await tx.wait();

//     console.log("Transacción enviada:", tx);
//     console.log("Receipt:", receipt);

//     setTxHash(tx.hash);
//     setStakedAmount((prev: number) => prev + amount);
//     setStakingStart(new Date());
//   } catch (err: any) {
//     console.error("Error en stakeTokens:", err);
//     setError(err.message || "Ocurrió un error al hacer stake de los tokens.");
//   } finally {
//     setLoading(false);
//   }
// };

// export const unstakeTokens = async (
//   signer: ethers.JsonRpcSigner | null,
//   provider: ethers.BrowserProvider | null,
//   amount: number,
//   setLoading: Function,
//   setError: Function,
//   setTxHash: Function,
//   setStakedAmount: Function,
//   setStakingStart: Function,
//   setStakingRewards: Function
// ) => {
//   console.log("Iniciando proceso de unstakeTokens...");
//   if (!signer) {
//     setError("No estás conectado a ninguna wallet.");
//     return;
//   }

//   const stakingContract = new ethers.Contract(
//     STAKING_ADDRESS,
//     stakingAbi.abi,
//     signer
//   );

//   try {
//     setLoading(true);
//     setError(null);

//     const userAddress = await signer.getAddress();
//     console.log("Dirección del usuario:", userAddress);

//     const stakedAmountBigNumber: bigint = await stakingContract.getStakedAmount(
//       userAddress
//     );
//     console.log(
//       "Monto staked actual (en wei):",
//       stakedAmountBigNumber.toString()
//     );

//     const stakedAmount = parseFloat(
//       ethers.formatUnits(stakedAmountBigNumber, 6)
//     );
//     console.log("Monto staked actual (formateado):", stakedAmount);

//     console.log(`Intentando hacer unstake de ${amount} tokens.`);

//     const stakingContractBalance = await checkStakingContractBalance(
//       signer,
//       setError
//     );
//     console.log(
//       "Balance del contrato de staking disponible:",
//       stakingContractBalance
//     );

//     if (amount > stakedAmount) {
//       setError(
//         "No tienes suficientes tokens apostados para realizar esta operación."
//       );
//       setLoading(false);
//       return;
//     }

//     const valueToUnstake = ethers.parseUnits(amount.toString(), 6);
//     console.log("Cantidad a desapostar (en wei):", valueToUnstake.toString());

//     const tx = await stakingContract.unstake(valueToUnstake);
//     const receipt = await tx.wait();

//     console.log("Transacción enviada:", tx);
//     console.log("Receipt:", receipt);

//     setTxHash(tx.hash);
//     setStakedAmount((prev: number) => prev - amount);

//     if (amount >= stakedAmount) {
//       setStakingStart(null);
//       setStakingRewards(0);
//     }
//   } catch (err: any) {
//     console.error("Error en unstakeTokens:", err);
//     setError(err.message || "Ocurrió un error al hacer unstake de los tokens.");
//   } finally {
//     setLoading(false);
//   }
// };

// export const checkStakingContractBalance = async (
//   signer: ethers.JsonRpcSigner,
//   setError: Function
// ) => {
//   try {
//     const tokenContract = new ethers.Contract(
//       ERC20_ADDRESS,
//       tokenAbi.abi,
//       signer
//     );
//     const stakingBalance = await tokenContract.balanceOf(STAKING_ADDRESS);
//     console.log(
//       "Balance del contrato de staking (en wei):",
//       stakingBalance.toString()
//     );

//     const stakingBalanceFormatted = parseFloat(
//       ethers.formatUnits(stakingBalance, 6)
//     );
//     console.log(
//       "Balance del contrato de staking (formateado):",
//       stakingBalanceFormatted
//     );

//     return stakingBalanceFormatted;
//   } catch (err) {
//     console.error("Error al obtener el balance del contrato de staking:", err);
//     setError("No se pudo obtener el balance del contrato de staking.");
//     return 0;
//   }
// };

export const logout = (
  setAccount: Function,
  setProvider: Function,
  setSigner: Function,
  setIsConnected: Function,
  setBalance: Function,
  setStakedAmount: Function,
  setStakingStart: Function,
  setStakingRewards: Function,
  setCurrentChainId: Function,
  setError: Function,
  setTxHash: Function
) => {
  setAccount(null);
  setProvider(null);
  setSigner(null);
  setIsConnected(false);
  setBalance(0);
  setStakedAmount(0);
  setStakingStart(null);
  setStakingRewards(0);
  setCurrentChainId(null);
  setError(null);
  setTxHash(null);
};


